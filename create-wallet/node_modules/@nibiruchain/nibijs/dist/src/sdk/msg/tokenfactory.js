"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupTokenFactoryMsgExtension = void 0;
const stargate_1 = require("@cosmjs/stargate");
const tx_1 = require("../../protojs/nibiru/tokenfactory/v1/tx");
const setupTokenFactoryMsgExtension = (base) => {
    const queryService = new tx_1.MsgClientImpl((0, stargate_1.createProtobufRpcClient)(base));
    return {
        tokenFactoryMsg: {
            createDenom: (body) => __awaiter(void 0, void 0, void 0, function* () { return queryService.CreateDenom(tx_1.MsgCreateDenom.fromPartial(body)); }),
            changeAdmin: (body) => __awaiter(void 0, void 0, void 0, function* () { return queryService.ChangeAdmin(tx_1.MsgChangeAdmin.fromPartial(body)); }),
            updateModuleParams: (body) => __awaiter(void 0, void 0, void 0, function* () {
                return queryService.UpdateModuleParams(tx_1.MsgUpdateModuleParams.fromPartial(body));
            }),
            mint: (body) => __awaiter(void 0, void 0, void 0, function* () { return queryService.Mint(tx_1.MsgMint.fromPartial(body)); }),
            burn: (body) => __awaiter(void 0, void 0, void 0, function* () { return queryService.Burn(tx_1.MsgBurn.fromPartial(body)); }),
            setDenomMetadata: (body) => __awaiter(void 0, void 0, void 0, function* () { return queryService.SetDenomMetadata(tx_1.MsgSetDenomMetadata.fromPartial(body)); }),
            burnNative: (body) => __awaiter(void 0, void 0, void 0, function* () { return queryService.BurnNative(tx_1.MsgBurnNative.fromPartial(body)); }),
        },
    };
};
exports.setupTokenFactoryMsgExtension = setupTokenFactoryMsgExtension;
//# sourceMappingURL=tokenfactory.js.map