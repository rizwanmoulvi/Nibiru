"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bignumber_js_1 = require("bignumber.js");
const _1 = require(".");
describe("balancer tests", () => {
    test("add x", () => {
        const balancerPool = new _1.BalancerPool((0, bignumber_js_1.BigNumber)(100), (0, bignumber_js_1.BigNumber)(100), (0, bignumber_js_1.BigNumber)(0.5) // 50% fee
        );
        expect(balancerPool.swapX((0, bignumber_js_1.BigNumber)(50))).toEqual({
            poolStart: {
                x: (0, bignumber_js_1.BigNumber)(100),
                y: (0, bignumber_js_1.BigNumber)(100),
                swapFee: (0, bignumber_js_1.BigNumber)(0.5),
            },
            poolEnd: {
                x: (0, bignumber_js_1.BigNumber)(150),
                y: (0, bignumber_js_1.BigNumber)(80),
                swapFee: (0, bignumber_js_1.BigNumber)(0.5),
            },
            dxAmm: (0, bignumber_js_1.BigNumber)(50),
            dxUser: (0, bignumber_js_1.BigNumber)(-50),
            dyAmm: (0, bignumber_js_1.BigNumber)(-20),
            dyUser: (0, bignumber_js_1.BigNumber)(20),
            priceImpact: (0, bignumber_js_1.BigNumber)("-0.46666666666666666667"),
        });
    });
    test("remove x", () => {
        const balancerPool = new _1.BalancerPool((0, bignumber_js_1.BigNumber)(100), (0, bignumber_js_1.BigNumber)(100), (0, bignumber_js_1.BigNumber)(0.5) // 50% fee
        );
        expect(balancerPool.swapX((0, bignumber_js_1.BigNumber)(-50))).toEqual({
            poolStart: {
                x: (0, bignumber_js_1.BigNumber)(100),
                y: (0, bignumber_js_1.BigNumber)(100),
                swapFee: (0, bignumber_js_1.BigNumber)(0.5),
            },
            poolEnd: {
                x: (0, bignumber_js_1.BigNumber)(50),
                y: (0, bignumber_js_1.BigNumber)(300),
                swapFee: (0, bignumber_js_1.BigNumber)(0.5),
            },
            dxAmm: (0, bignumber_js_1.BigNumber)(-50),
            dxUser: (0, bignumber_js_1.BigNumber)(50),
            dyAmm: (0, bignumber_js_1.BigNumber)(200),
            dyUser: (0, bignumber_js_1.BigNumber)(-200),
            priceImpact: (0, bignumber_js_1.BigNumber)(5),
        });
    });
    test("add y", () => {
        const balancerPool = new _1.BalancerPool((0, bignumber_js_1.BigNumber)(100), (0, bignumber_js_1.BigNumber)(100), (0, bignumber_js_1.BigNumber)(0.5) // 50% fee
        );
        expect(balancerPool.swapY((0, bignumber_js_1.BigNumber)(50))).toEqual({
            poolStart: {
                x: (0, bignumber_js_1.BigNumber)(100),
                y: (0, bignumber_js_1.BigNumber)(100),
                swapFee: (0, bignumber_js_1.BigNumber)(0.5),
            },
            poolEnd: {
                x: (0, bignumber_js_1.BigNumber)(80),
                y: (0, bignumber_js_1.BigNumber)(150),
                swapFee: (0, bignumber_js_1.BigNumber)(0.5),
            },
            dxAmm: (0, bignumber_js_1.BigNumber)(-20),
            dxUser: (0, bignumber_js_1.BigNumber)(20),
            dyAmm: (0, bignumber_js_1.BigNumber)(50),
            dyUser: (0, bignumber_js_1.BigNumber)(-50),
            priceImpact: (0, bignumber_js_1.BigNumber)(0.875),
        });
    });
    test("remove y", () => {
        const balancerPool = new _1.BalancerPool((0, bignumber_js_1.BigNumber)(100), (0, bignumber_js_1.BigNumber)(100), (0, bignumber_js_1.BigNumber)(0.5) // 50% fee
        );
        expect(balancerPool.swapY((0, bignumber_js_1.BigNumber)(-50))).toEqual({
            poolStart: {
                x: (0, bignumber_js_1.BigNumber)(100),
                y: (0, bignumber_js_1.BigNumber)(100),
                swapFee: (0, bignumber_js_1.BigNumber)(0.5),
            },
            poolEnd: {
                x: (0, bignumber_js_1.BigNumber)(300),
                y: (0, bignumber_js_1.BigNumber)(50),
                swapFee: (0, bignumber_js_1.BigNumber)(0.5),
            },
            dxAmm: (0, bignumber_js_1.BigNumber)(200),
            dxUser: (0, bignumber_js_1.BigNumber)(-200),
            dyAmm: (0, bignumber_js_1.BigNumber)(-50),
            dyUser: (0, bignumber_js_1.BigNumber)(50),
            priceImpact: (0, bignumber_js_1.BigNumber)("-0.83333333333333333334"),
        });
    });
    test("swapX returns undefined if not positive", () => {
        const balancerPool = new _1.BalancerPool((0, bignumber_js_1.BigNumber)(-100), (0, bignumber_js_1.BigNumber)(100), (0, bignumber_js_1.BigNumber)(0.5) // 50% fee
        );
        expect(balancerPool.swapX((0, bignumber_js_1.BigNumber)(-1))).toBeUndefined();
    });
    test("swapX returns undefined if poolEnd x and y are zero", () => {
        const balancerPool = new _1.BalancerPool((0, bignumber_js_1.BigNumber)(0), (0, bignumber_js_1.BigNumber)(0), (0, bignumber_js_1.BigNumber)(0.5) // 50% fee
        );
        expect(balancerPool.swapX((0, bignumber_js_1.BigNumber)(0))).toBeUndefined();
    });
    test("swapY returns undefined if not positive", () => {
        const balancerPool = new _1.BalancerPool((0, bignumber_js_1.BigNumber)(100), (0, bignumber_js_1.BigNumber)(-100), (0, bignumber_js_1.BigNumber)(0.5) // 50% fee
        );
        expect(balancerPool.swapY((0, bignumber_js_1.BigNumber)(-1))).toBeUndefined();
    });
    test("swapY returns undefined if poolEnd x and y are zero", () => {
        const balancerPool = new _1.BalancerPool((0, bignumber_js_1.BigNumber)(0), (0, bignumber_js_1.BigNumber)(0), (0, bignumber_js_1.BigNumber)(0.5) // 50% fee
        );
        expect(balancerPool.swapY((0, bignumber_js_1.BigNumber)(0))).toBeUndefined();
    });
});
//# sourceMappingURL=balancer.test.js.map