"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.faucetUrlFromChain = exports.useFaucet = void 0;
const cross_fetch_1 = require("cross-fetch");
const _1 = require(".");
/**
 * Sends 11 NIBI, 100 NUSD, and 100 USDT to the given address from the testnet faucet.
 */
function useFaucet({ address, chain, amts, grecaptcha, }) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!amts) {
            // default values
            amts = {
                nibi: 11,
                nusd: 100,
                usdt: 100,
            };
        }
        const coins = [
            `${amts.nibi * 1e6}unibi`,
            `${amts.nusd * 1e6}unusd`,
            `${amts.usdt * 1e6}uusdt`,
        ];
        const faucetUrl = (0, exports.faucetUrlFromChain)(chain);
        // Execute faucet request
        console.info(`Requesting funds from faucet @ ${faucetUrl}:
    Coins: ${coins}
    Address: ${address}
    `);
        return (0, cross_fetch_1.fetch)(faucetUrl, {
            method: "POST",
            headers: {
                Accept: "application/json",
                "Content-Type": "application/json",
            },
            body: JSON.stringify({ address, coins, grecaptcha }),
        });
    });
}
exports.useFaucet = useFaucet;
/**
 * Constructs a faucet URL from a Chain object.
 * @param chain a Chain object
 */
const faucetUrlFromChain = (chain) => {
    const parts = (0, _1.chainToParts)(chain);
    // e.g. https://faucet.itn-X.nibiru.fi/ where X is the number
    const restOfChain = chain.chainName.includes("cataclysm")
        ? ""
        : `.${parts.shortName}-${parts.number}`;
    return `https://faucet${restOfChain}.nibiru.fi/`;
};
exports.faucetUrlFromChain = faucetUrlFromChain;
//# sourceMappingURL=faucet.js.map