"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.computeStakingEmissionPerPeriod = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
/**
 * Computes the amount of staking inflation claimable via the
 * "cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward" transaction
 * message based on the inflation parameters (`Params`), current inflation
 * period, and the users percentage ownership of the total stake, or voting
 * power.
 *
 * @param params - Nibiru inflation module parameters, which specify the
 *    polynomial for the NIBI token emmissions.
 * @param epochMintProvision - EpochMintProvisionResponse from chain using txClient.
 * @param totalStaked - Total stake (unibi) of all stakers in in the network.
 * @param myStake - User's current stake.
 * @param addedStake - New stake to add to the user's current stake. This is
 *     used to compute a new annual percentage return after a staking tx.
 * */
const computeStakingEmissionPerPeriod = (params, epochMintProvision, totalStaked, myStake, addedStake = 0) => {
    var _a, _b, _c, _d;
    const rewardForPeriod = (0, bignumber_js_1.default)((_b = (_a = epochMintProvision.epochMintProvision) === null || _a === void 0 ? void 0 : _a.amount) !== null && _b !== void 0 ? _b : 0).times((_d = (_c = params.inflationDistribution) === null || _c === void 0 ? void 0 : _c.stakingRewards) !== null && _d !== void 0 ? _d : 0);
    return (0, bignumber_js_1.default)(myStake + addedStake)
        .div(totalStaked + addedStake)
        .times(rewardForPeriod)
        .toNumber();
};
exports.computeStakingEmissionPerPeriod = computeStakingEmissionPerPeriod;
//# sourceMappingURL=math.js.map