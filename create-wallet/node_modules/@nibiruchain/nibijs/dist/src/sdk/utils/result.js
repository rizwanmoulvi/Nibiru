"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseError = exports.Result = void 0;
/** Poor-man's Result type from Rust.
 *
 * The Result type forces you to explicitly handle errors in contrast to allowing
 * errors to propagate up the call stack implicitly. Handling potential errors
 * explicitly leads to more robust and reliable code.
 *
 * Ref: <a href="https://doc.rust-lang.org/book/ch09-02-recoverable-errors-with-result.html#propagating-errors">Propagating Errors - Rust Book</a>.
 *
 * @example
 * // ---------------------------------------
 * // Most common use-case: Result.ofSafeExec
 * // ---------------------------------------
 * res = Result.ofSafeExec(somethingDangerous) // without args
 *
 * // with args
 * res = Result.ofSafeExec(() => somethingDangerous(arg0, arg1))
 *
 * @example
 * // ---------------------------------------
 * // Direct constructor
 * // ---------------------------------------
 * let res = new Result({ ok: "Operation successful!" })
 * if (res.isOk()) {
 *   happyPath(res.ok)
 * } else {
 *   handleGracefully(res.err!) // throws impossible based on constructor args
 * }
 *
 * */
class Result {
    constructor({ ok, err }) {
        // TODO: Refactor all references of these into a common function; isErr === !isOk
        // Also, ok and err are also public in this class
        this.isErr = () => this.err !== undefined;
        this.isOk = () => !this.isErr();
        this.ok = ok;
        this.err = err ? (0, exports.parseError)(err) : undefined;
        if (Boolean(this.ok) && Boolean(this.err)) {
            console.error("ResultError: ok and error states must not be defined simultaneously");
        }
    }
}
exports.Result = Result;
_a = Result;
/** Constructor for "Result" using the return value of the input function. */
Result.ofSafeExec = (fn) => {
    try {
        return new Result({ ok: fn() });
    }
    catch (err) {
        return new Result({ err });
    }
};
/** Constructor for "Result" using the return value of the input async function.
 * @example
 * const result = Result.ofSafeExecAsync(async () => someAsyncFunc(args))
 * */
Result.ofSafeExecAsync = (fn) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        return new Result({ ok: yield fn() });
    }
    catch (err) {
        return new Result({ err });
    }
});
/** parseError: Guarantees runtime strong error typing since this isn't
 * guaranteed in JS by default. The error that comes out of a try-catch may not
 * have type "Error" since it's perfectly valid to throw strings or `undefined`.
 * */
const parseError = (err) => err instanceof Error ? err : new Error(`${err}`);
exports.parseError = parseError;
//# sourceMappingURL=result.js.map