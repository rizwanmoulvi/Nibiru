import { AuthExtension, DistributionExtension, GovExtension, IbcExtension, QueryClient as StargateQueryClient, StargateClient, StargateClientOptions, StakingExtension } from "@cosmjs/stargate";
import { Tendermint37Client } from "@cosmjs/tendermint-rpc";
import { CosmWasmClient, WasmExtension } from "@cosmjs/cosmwasm-stargate";
import { TxResponse } from "@cosmjs/tendermint-rpc/build/tendermint37";
import { EpochsExtension, OracleExtension, SudoExtension, InflationExtension, Result, DevgasExtension, DevgasMsgExtension, OracleMsgExtension, InflationMsgExtension, SudoMsgExtension, TokenFactoryMsgExtension } from "..";
import { TokenFactoryExtension } from "./tokenfactory";
export type NibiruExtensions = StargateQueryClient & SudoExtension & InflationExtension & OracleExtension & EpochsExtension & DevgasExtension & DistributionExtension & GovExtension & StakingExtension & IbcExtension & WasmExtension & AuthExtension & TokenFactoryExtension & DevgasMsgExtension & OracleMsgExtension & InflationMsgExtension & SudoMsgExtension & TokenFactoryMsgExtension;
/** Querier for a Nibiru network.
 * @example
 * import { NibiruQuerier, Tesnet } from "@nibiruchain/nibijs"
 * const chain = Testnet()
 * const querier = await NibiruQuerier.connect(chain.endptTm)
 * */
export declare class NibiruQuerier extends StargateClient {
    readonly nibiruExtensions: NibiruExtensions;
    readonly wasmClient: CosmWasmClient;
    readonly tm: Tendermint37Client;
    static connect(endpoint: string, options?: StargateClientOptions): Promise<NibiruQuerier>;
    protected constructor(tmClient: Tendermint37Client, options: StargateClientOptions, wasmClient: CosmWasmClient);
    waitForHeight(height: number): Promise<void>;
    waitForNextBlock(): Promise<void>;
    /** getTxByHash: Query a transaction (tx) using its hexadecial encoded tx hash.
     * A tx hash uniquely identifies a tx on the blockchain.
     *
     * The hex-encoded tx hash is:
     * - An unambiguous representation of the SHA-256 cryptographic hash in the
     *   consensus layer.
     * - Well-suited for human-facing applications, as it is easier to work with
     *   than bytes.
     *
     * @example
     * const txHash = "7A919F2CC9A51B139444F7D8E84A46EEF307E839C6CA914C1A1C594FEF5C1562"
     * const txRespResult = await getTxByHash(txHash)
     * */
    getTxByHash: (txHashHex: string) => Promise<Result<TxResponse>>;
    /** getTxByHashBytes: Query a transaction (tx) using its SHA-256 tx hash (bytes).
     * A tx hash uniquely identifies a tx on the blockchain.
     *
     * @see getTxByHash - Equivalent query using the hex-encoded tx hash string.
     * */
    getTxByHashBytes: (txHash: Uint8Array) => Promise<Result<TxResponse>>;
}
//# sourceMappingURL=query.d.ts.map