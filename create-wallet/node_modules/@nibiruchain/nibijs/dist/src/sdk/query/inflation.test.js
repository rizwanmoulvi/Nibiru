"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const query = __importStar(require("../../protojs/nibiru/inflation/v1/query"));
const _1 = require(".");
describe("setupInflationExtension", () => {
    const mockBaseQueryClient = {};
    jest.spyOn(query, "QueryClientImpl").mockReturnValue({
        Period: jest.fn().mockResolvedValue({ period: "Test Period" }),
        EpochMintProvision: jest.fn().mockResolvedValue({
            epochMintProvision: "Test Epoch Mint Provision",
        }),
        SkippedEpochs: jest.fn().mockResolvedValue({
            skippedEpochs: "Test Skipped Epochs",
        }),
        CirculatingSupply: jest.fn().mockResolvedValue({
            circulatingSupply: "Test Circulating Supply",
        }),
        InflationRate: jest.fn().mockResolvedValue({
            inflationRate: "Test Inflation Rate",
        }),
        Params: jest.fn().mockResolvedValue({
            params: "Test Params",
        }),
    });
    test("should setup inflation extension correctly", () => {
        const extension = (0, _1.setupInflationExtension)(mockBaseQueryClient);
        expect(extension.inflation).toBeDefined();
        expect(extension.inflation.period).toBeInstanceOf(Function);
        expect(extension.inflation.epochMintProvision).toBeInstanceOf(Function);
        expect(extension.inflation.skippedEpochs).toBeInstanceOf(Function);
        expect(extension.inflation.circulatingSupply).toBeInstanceOf(Function);
        expect(extension.inflation.inflationRate).toBeInstanceOf(Function);
        expect(extension.inflation.params).toBeInstanceOf(Function);
    });
    describe("inflation.period", () => {
        test("should call QueryPeriodRequest and return the response", () => __awaiter(void 0, void 0, void 0, function* () {
            const queryPeriodRequest = jest
                .spyOn(query.QueryPeriodRequest, "fromPartial")
                .mockReturnValue({});
            const extension = (0, _1.setupInflationExtension)(mockBaseQueryClient);
            const result = yield extension.inflation.period();
            expect(queryPeriodRequest).toHaveBeenCalledWith({});
            expect(result).toEqual({ period: "Test Period" });
        }));
    });
    describe("inflation.epochMintProvision", () => {
        test("should call QueryEpochMintProvisionRequest and return the response", () => __awaiter(void 0, void 0, void 0, function* () {
            const queryEpochMintProvisionRequest = jest
                .spyOn(query.QueryEpochMintProvisionRequest, "fromPartial")
                .mockReturnValue({});
            const extension = (0, _1.setupInflationExtension)(mockBaseQueryClient);
            const result = yield extension.inflation.epochMintProvision();
            expect(queryEpochMintProvisionRequest).toHaveBeenCalledWith({});
            expect(result).toEqual({
                epochMintProvision: "Test Epoch Mint Provision",
            });
        }));
    });
    describe("inflation.skippedEpochs", () => {
        test("should call QuerySkippedEpochsRequest and return the response", () => __awaiter(void 0, void 0, void 0, function* () {
            const querySkippedEpochsRequest = jest
                .spyOn(query.QuerySkippedEpochsRequest, "fromPartial")
                .mockReturnValue({});
            const extension = (0, _1.setupInflationExtension)(mockBaseQueryClient);
            const result = yield extension.inflation.skippedEpochs();
            expect(querySkippedEpochsRequest).toHaveBeenCalledWith({});
            expect(result).toEqual({ skippedEpochs: "Test Skipped Epochs" });
        }));
    });
    describe("inflation.circulatingSupply", () => {
        test("should call QueryCirculatingSupplyRequest and return the response", () => __awaiter(void 0, void 0, void 0, function* () {
            const queryCirculatingSupplyRequest = jest
                .spyOn(query.QueryCirculatingSupplyRequest, "fromPartial")
                .mockReturnValue({});
            const extension = (0, _1.setupInflationExtension)(mockBaseQueryClient);
            const result = yield extension.inflation.circulatingSupply();
            expect(queryCirculatingSupplyRequest).toHaveBeenCalledWith({});
            expect(result).toEqual({ circulatingSupply: "Test Circulating Supply" });
        }));
    });
    describe("inflation.inflationRate", () => {
        test("should call QueryInflationRateRequest and return the response", () => __awaiter(void 0, void 0, void 0, function* () {
            const queryInflationRateRequest = jest
                .spyOn(query.QueryInflationRateRequest, "fromPartial")
                .mockReturnValue({});
            const extension = (0, _1.setupInflationExtension)(mockBaseQueryClient);
            const result = yield extension.inflation.inflationRate();
            expect(queryInflationRateRequest).toHaveBeenCalledWith({});
            expect(result).toEqual({ inflationRate: "Test Inflation Rate" });
        }));
    });
    describe("inflation.params", () => {
        test("should call QueryParamsRequest and return the response", () => __awaiter(void 0, void 0, void 0, function* () {
            const queryParamsRequest = jest
                .spyOn(query.QueryParamsRequest, "fromPartial")
                .mockReturnValue({});
            const extension = (0, _1.setupInflationExtension)(mockBaseQueryClient);
            const result = yield extension.inflation.params();
            expect(queryParamsRequest).toHaveBeenCalledWith({});
            expect(result).toEqual({ params: "Test Params" });
        }));
    });
});
//# sourceMappingURL=inflation.test.js.map