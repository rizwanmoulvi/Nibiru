"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupDevgasExtension = void 0;
const stargate_1 = require("@cosmjs/stargate");
const query_1 = require("../../protojs/nibiru/devgas/v1/query");
const setupDevgasExtension = (base) => {
    const queryService = new query_1.QueryClientImpl((0, stargate_1.createProtobufRpcClient)(base));
    return {
        devgas: {
            feeShare: (args) => __awaiter(void 0, void 0, void 0, function* () { return queryService.FeeShare(query_1.QueryFeeShareRequest.fromPartial(args)); }),
            feeSharesByWithdrawer: (args) => __awaiter(void 0, void 0, void 0, function* () {
                return queryService.FeeSharesByWithdrawer(query_1.QueryFeeSharesByWithdrawerRequest.fromPartial(args));
            }),
            feeShares: (args) => __awaiter(void 0, void 0, void 0, function* () { return queryService.FeeShares(query_1.QueryFeeSharesRequest.fromPartial(args)); }),
            params: (args) => __awaiter(void 0, void 0, void 0, function* () { return queryService.Params(query_1.QueryParamsRequest.fromPartial(args)); }),
        },
    };
};
exports.setupDevgasExtension = setupDevgasExtension;
//# sourceMappingURL=devgas.js.map