"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupInflationExtension = void 0;
const stargate_1 = require("@cosmjs/stargate");
const query_1 = require("../../protojs/nibiru/inflation/v1/query");
const setupInflationExtension = (base) => {
    const queryService = new query_1.QueryClientImpl((0, stargate_1.createProtobufRpcClient)(base));
    return {
        inflation: {
            circulatingSupply: () => __awaiter(void 0, void 0, void 0, function* () {
                return queryService.CirculatingSupply(query_1.QueryCirculatingSupplyRequest.fromPartial({}));
            }),
            epochMintProvision: () => __awaiter(void 0, void 0, void 0, function* () {
                return queryService.EpochMintProvision(query_1.QueryEpochMintProvisionRequest.fromPartial({}));
            }),
            inflationRate: () => __awaiter(void 0, void 0, void 0, function* () { return queryService.InflationRate(query_1.QueryInflationRateRequest.fromPartial({})); }),
            params: () => __awaiter(void 0, void 0, void 0, function* () { return queryService.Params(query_1.QueryParamsRequest.fromPartial({})); }),
            period: () => __awaiter(void 0, void 0, void 0, function* () { return queryService.Period(query_1.QueryPeriodRequest.fromPartial({})); }),
            skippedEpochs: () => __awaiter(void 0, void 0, void 0, function* () { return queryService.SkippedEpochs(query_1.QuerySkippedEpochsRequest.fromPartial({})); }),
        },
    };
};
exports.setupInflationExtension = setupInflationExtension;
//# sourceMappingURL=inflation.js.map