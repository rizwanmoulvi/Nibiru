/**
 * @fileoverview query extension for the "oracle" module
 */
import { QueryClient } from "@cosmjs/stargate";
import { QueryActivesResponse, QueryAggregatePrevoteRequest, QueryAggregatePrevoteResponse, QueryAggregatePrevotesResponse, QueryAggregateVoteRequest, QueryAggregateVoteResponse, QueryAggregateVotesResponse, QueryExchangeRateRequest, QueryExchangeRateResponse, QueryExchangeRatesResponse, QueryFeederDelegationRequest, QueryFeederDelegationResponse, QueryMissCounterRequest, QueryMissCounterResponse, QueryParamsResponse, QueryVoteTargetsResponse } from "../../protojs/nibiru/oracle/v1/query";
export interface OracleExtension {
    oracle: Readonly<{
        /** actives: Query the list of active/whitelisted pairs for the oracle module. */
        actives: () => Promise<QueryActivesResponse>;
        /** aggregatePrevote: TODO Query outstanding oracle aggregate prevotes. */
        aggregatePrevote: (body: QueryAggregatePrevoteRequest) => Promise<QueryAggregatePrevoteResponse>;
        /** aggregatePrevotes: TODO Query all aggregate prevotes. */
        aggregatePrevotes: () => Promise<QueryAggregatePrevotesResponse>;
        /** aggregateVote: TODO Query outstanding oracle aggregate vote. */
        aggregateVote: (body: QueryAggregateVoteRequest) => Promise<QueryAggregateVoteResponse>;
        /** aggregateVotes: TODO Query all aggregate votes. */
        aggregateVotes: () => Promise<QueryAggregateVotesResponse>;
        /** exchangeRate: Returns the  current exchange rate that validators voted
         * for on the given 'pair'. */
        exchangeRate: (body: QueryExchangeRateRequest) => Promise<QueryExchangeRateResponse>;
        /** exchangeRate: Returns the  current exchange rate that validators voted
         * for on the given 'pair'. */
        exchangeRateTwap: (body: QueryExchangeRateRequest) => Promise<QueryExchangeRateResponse>;
        /** TODO Query all exchange rates. */
        exchangeRates: () => Promise<QueryExchangeRatesResponse>;
        /** feederDelegation: Query for the feeder account to which the validator has
         * delegated the authority to vote on exchange rotes prices. */
        feederDelegation: (body: QueryFeederDelegationRequest) => Promise<QueryFeederDelegationResponse>;
        /** TODO Query the miss count of a validator */
        missCounter: (body: QueryMissCounterRequest) => Promise<QueryMissCounterResponse>;
        /** params: Returns the module parameters for the x/oracle module. */
        params: () => Promise<QueryParamsResponse>;
        /** voteTargets: Returns current vote targets, the list of pairs that
         * everyone should vote on in the during the vote period. */
        voteTargets: () => Promise<QueryVoteTargetsResponse>;
    }>;
}
export interface ExchangeRatesMap {
    [pair: string]: number;
}
export declare const newExchangeRatesMap: (resp: QueryExchangeRatesResponse) => ExchangeRatesMap;
export declare const setupOracleExtension: (base: QueryClient) => OracleExtension;
//# sourceMappingURL=oracle.d.ts.map