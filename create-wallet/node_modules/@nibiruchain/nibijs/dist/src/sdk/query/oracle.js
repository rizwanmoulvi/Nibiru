"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupOracleExtension = exports.newExchangeRatesMap = void 0;
/**
 * @fileoverview query extension for the "oracle" module
 */
const stargate_1 = require("@cosmjs/stargate");
const query_1 = require("../../protojs/nibiru/oracle/v1/query");
const __1 = require("..");
const newExchangeRatesMap = (resp) => {
    const ratesMap = {};
    resp.exchangeRates.forEach((exchangeRateTuple) => {
        const { exchangeRate, pair } = exchangeRateTuple;
        ratesMap[pair] = (0, __1.fromSdkDec)(exchangeRate);
    });
    return ratesMap;
};
exports.newExchangeRatesMap = newExchangeRatesMap;
const setupOracleExtension = (base) => {
    const queryService = new query_1.QueryClientImpl((0, stargate_1.createProtobufRpcClient)(base));
    return {
        oracle: {
            actives: () => __awaiter(void 0, void 0, void 0, function* () { return queryService.Actives(query_1.QueryActivesRequest.fromPartial({})); }),
            aggregatePrevote: (body) => __awaiter(void 0, void 0, void 0, function* () {
                return queryService.AggregatePrevote(query_1.QueryAggregatePrevoteRequest.fromPartial(body));
            }),
            aggregatePrevotes: () => __awaiter(void 0, void 0, void 0, function* () {
                return queryService.AggregatePrevotes(query_1.QueryAggregatePrevotesRequest.fromPartial({}));
            }),
            aggregateVote: (body) => __awaiter(void 0, void 0, void 0, function* () { return queryService.AggregateVote(query_1.QueryAggregateVoteRequest.fromPartial(body)); }),
            aggregateVotes: () => __awaiter(void 0, void 0, void 0, function* () { return queryService.AggregateVotes(query_1.QueryAggregateVotesRequest.fromPartial({})); }),
            exchangeRate: (body) => __awaiter(void 0, void 0, void 0, function* () { return queryService.ExchangeRate(query_1.QueryExchangeRateRequest.fromPartial(body)); }),
            exchangeRateTwap: (body) => __awaiter(void 0, void 0, void 0, function* () {
                return queryService.ExchangeRateTwap(query_1.QueryExchangeRateRequest.fromPartial(body));
            }),
            exchangeRates: () => __awaiter(void 0, void 0, void 0, function* () { return queryService.ExchangeRates(query_1.QueryExchangeRatesRequest.fromPartial({})); }),
            feederDelegation: (body) => __awaiter(void 0, void 0, void 0, function* () {
                return queryService.FeederDelegation(query_1.QueryFeederDelegationRequest.fromPartial(body));
            }),
            missCounter: (body) => __awaiter(void 0, void 0, void 0, function* () { return queryService.MissCounter(query_1.QueryMissCounterRequest.fromPartial(body)); }),
            params: () => __awaiter(void 0, void 0, void 0, function* () { return queryService.Params(query_1.QueryParamsRequest.fromPartial({})); }),
            voteTargets: () => __awaiter(void 0, void 0, void 0, function* () { return queryService.VoteTargets(query_1.QueryVoteTargetsRequest.fromPartial({})); }),
        },
    };
};
exports.setupOracleExtension = setupOracleExtension;
//# sourceMappingURL=oracle.js.map