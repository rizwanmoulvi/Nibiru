"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const query = __importStar(require("../../protojs/nibiru/epochs/v1/query"));
const _1 = require(".");
describe("setupEpochsExtension", () => {
    const mockBaseQueryClient = {};
    jest.spyOn(query, "QueryClientImpl").mockReturnValue({
        CurrentEpoch: jest
            .fn()
            .mockResolvedValue({ currentEpoch: "Test Current Epoch" }),
        EpochInfos: jest.fn().mockResolvedValue({
            epochsInfo: ["Test Epoch Info 1", "Test Epoch Info 2"],
        }),
    });
    test("should setup epochs extension correctly", () => {
        const extension = (0, _1.setupEpochsExtension)(mockBaseQueryClient);
        expect(extension.epochs).toBeDefined();
        expect(extension.epochs.currentEpoch).toBeInstanceOf(Function);
        expect(extension.epochs.epochsInfos).toBeInstanceOf(Function);
    });
    describe("epochs.currentEpoch", () => {
        test("should call QueryCurrentEpochRequest and return the response", () => __awaiter(void 0, void 0, void 0, function* () {
            const queryCurrentEpochRequest = jest
                .spyOn(query.QueryCurrentEpochRequest, "fromPartial")
                .mockReturnValue({});
            const extension = (0, _1.setupEpochsExtension)(mockBaseQueryClient);
            const result = yield extension.epochs.currentEpoch({
                identifier: "Test Identifier",
            });
            expect(queryCurrentEpochRequest).toHaveBeenCalledWith({
                identifier: "Test Identifier",
            });
            expect(result).toEqual({ currentEpoch: "Test Current Epoch" });
        }));
    });
    describe("epochs.epochsInfo", () => {
        test("should call QueryEpochInfosRequest and return the response", () => __awaiter(void 0, void 0, void 0, function* () {
            const queryEpochInfosRequest = jest
                .spyOn(query.QueryEpochInfosRequest, "fromPartial")
                .mockReturnValue({});
            const extension = (0, _1.setupEpochsExtension)(mockBaseQueryClient);
            const result = yield extension.epochs.epochsInfos();
            expect(queryEpochInfosRequest).toHaveBeenCalledWith({});
            expect(result).toEqual({
                epochsInfo: ["Test Epoch Info 1", "Test Epoch Info 2"],
            });
        }));
    });
});
//# sourceMappingURL=epochs.test.js.map