"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TxResult = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
function createBaseTxResult() {
    return {
        height: long_1.default.ZERO,
        txIndex: 0,
        msgIndex: 0,
        ethTxIndex: 0,
        failed: false,
        gasUsed: long_1.default.UZERO,
        cumulativeGasUsed: long_1.default.UZERO,
    };
}
exports.TxResult = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (!message.height.isZero()) {
            writer.uint32(8).int64(message.height);
        }
        if (message.txIndex !== 0) {
            writer.uint32(16).uint32(message.txIndex);
        }
        if (message.msgIndex !== 0) {
            writer.uint32(24).uint32(message.msgIndex);
        }
        if (message.ethTxIndex !== 0) {
            writer.uint32(32).int32(message.ethTxIndex);
        }
        if (message.failed === true) {
            writer.uint32(40).bool(message.failed);
        }
        if (!message.gasUsed.isZero()) {
            writer.uint32(48).uint64(message.gasUsed);
        }
        if (!message.cumulativeGasUsed.isZero()) {
            writer.uint32(56).uint64(message.cumulativeGasUsed);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTxResult();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.height = reader.int64();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.txIndex = reader.uint32();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.msgIndex = reader.uint32();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.ethTxIndex = reader.int32();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.failed = reader.bool();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.gasUsed = reader.uint64();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.cumulativeGasUsed = reader.uint64();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            height: isSet(object.height) ? long_1.default.fromValue(object.height) : long_1.default.ZERO,
            txIndex: isSet(object.txIndex) ? Number(object.txIndex) : 0,
            msgIndex: isSet(object.msgIndex) ? Number(object.msgIndex) : 0,
            ethTxIndex: isSet(object.ethTxIndex) ? Number(object.ethTxIndex) : 0,
            failed: isSet(object.failed) ? Boolean(object.failed) : false,
            gasUsed: isSet(object.gasUsed) ? long_1.default.fromValue(object.gasUsed) : long_1.default.UZERO,
            cumulativeGasUsed: isSet(object.cumulativeGasUsed) ? long_1.default.fromValue(object.cumulativeGasUsed) : long_1.default.UZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        message.height !== undefined && (obj.height = (message.height || long_1.default.ZERO).toString());
        message.txIndex !== undefined && (obj.txIndex = Math.round(message.txIndex));
        message.msgIndex !== undefined && (obj.msgIndex = Math.round(message.msgIndex));
        message.ethTxIndex !== undefined && (obj.ethTxIndex = Math.round(message.ethTxIndex));
        message.failed !== undefined && (obj.failed = message.failed);
        message.gasUsed !== undefined && (obj.gasUsed = (message.gasUsed || long_1.default.UZERO).toString());
        message.cumulativeGasUsed !== undefined &&
            (obj.cumulativeGasUsed = (message.cumulativeGasUsed || long_1.default.UZERO).toString());
        return obj;
    },
    create(base) {
        return exports.TxResult.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseTxResult();
        message.height = (object.height !== undefined && object.height !== null)
            ? long_1.default.fromValue(object.height)
            : long_1.default.ZERO;
        message.txIndex = (_a = object.txIndex) !== null && _a !== void 0 ? _a : 0;
        message.msgIndex = (_b = object.msgIndex) !== null && _b !== void 0 ? _b : 0;
        message.ethTxIndex = (_c = object.ethTxIndex) !== null && _c !== void 0 ? _c : 0;
        message.failed = (_d = object.failed) !== null && _d !== void 0 ? _d : false;
        message.gasUsed = (object.gasUsed !== undefined && object.gasUsed !== null)
            ? long_1.default.fromValue(object.gasUsed)
            : long_1.default.UZERO;
        message.cumulativeGasUsed = (object.cumulativeGasUsed !== undefined && object.cumulativeGasUsed !== null)
            ? long_1.default.fromValue(object.cumulativeGasUsed)
            : long_1.default.UZERO;
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=indexer.js.map