"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventBlockBloom = exports.EventMessage = exports.EventTxLog = exports.EventEthereumTx = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
function createBaseEventEthereumTx() {
    return { amount: "", ethHash: "", index: "", gasUsed: "", hash: "", recipient: "", ethTxFailed: "" };
}
exports.EventEthereumTx = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.amount !== "") {
            writer.uint32(10).string(message.amount);
        }
        if (message.ethHash !== "") {
            writer.uint32(18).string(message.ethHash);
        }
        if (message.index !== "") {
            writer.uint32(26).string(message.index);
        }
        if (message.gasUsed !== "") {
            writer.uint32(34).string(message.gasUsed);
        }
        if (message.hash !== "") {
            writer.uint32(42).string(message.hash);
        }
        if (message.recipient !== "") {
            writer.uint32(50).string(message.recipient);
        }
        if (message.ethTxFailed !== "") {
            writer.uint32(58).string(message.ethTxFailed);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventEthereumTx();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.amount = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.ethHash = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.index = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.gasUsed = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.hash = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.recipient = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.ethTxFailed = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            amount: isSet(object.amount) ? String(object.amount) : "",
            ethHash: isSet(object.ethHash) ? String(object.ethHash) : "",
            index: isSet(object.index) ? String(object.index) : "",
            gasUsed: isSet(object.gasUsed) ? String(object.gasUsed) : "",
            hash: isSet(object.hash) ? String(object.hash) : "",
            recipient: isSet(object.recipient) ? String(object.recipient) : "",
            ethTxFailed: isSet(object.ethTxFailed) ? String(object.ethTxFailed) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.amount !== undefined && (obj.amount = message.amount);
        message.ethHash !== undefined && (obj.ethHash = message.ethHash);
        message.index !== undefined && (obj.index = message.index);
        message.gasUsed !== undefined && (obj.gasUsed = message.gasUsed);
        message.hash !== undefined && (obj.hash = message.hash);
        message.recipient !== undefined && (obj.recipient = message.recipient);
        message.ethTxFailed !== undefined && (obj.ethTxFailed = message.ethTxFailed);
        return obj;
    },
    create(base) {
        return exports.EventEthereumTx.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseEventEthereumTx();
        message.amount = (_a = object.amount) !== null && _a !== void 0 ? _a : "";
        message.ethHash = (_b = object.ethHash) !== null && _b !== void 0 ? _b : "";
        message.index = (_c = object.index) !== null && _c !== void 0 ? _c : "";
        message.gasUsed = (_d = object.gasUsed) !== null && _d !== void 0 ? _d : "";
        message.hash = (_e = object.hash) !== null && _e !== void 0 ? _e : "";
        message.recipient = (_f = object.recipient) !== null && _f !== void 0 ? _f : "";
        message.ethTxFailed = (_g = object.ethTxFailed) !== null && _g !== void 0 ? _g : "";
        return message;
    },
};
function createBaseEventTxLog() {
    return { txLogs: [] };
}
exports.EventTxLog = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.txLogs) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventTxLog();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.txLogs.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { txLogs: Array.isArray(object === null || object === void 0 ? void 0 : object.txLogs) ? object.txLogs.map((e) => String(e)) : [] };
    },
    toJSON(message) {
        const obj = {};
        if (message.txLogs) {
            obj.txLogs = message.txLogs.map((e) => e);
        }
        else {
            obj.txLogs = [];
        }
        return obj;
    },
    create(base) {
        return exports.EventTxLog.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseEventTxLog();
        message.txLogs = ((_a = object.txLogs) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    },
};
function createBaseEventMessage() {
    return { module: "", sender: "", txType: "" };
}
exports.EventMessage = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.module !== "") {
            writer.uint32(10).string(message.module);
        }
        if (message.sender !== "") {
            writer.uint32(18).string(message.sender);
        }
        if (message.txType !== "") {
            writer.uint32(26).string(message.txType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.module = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.txType = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            module: isSet(object.module) ? String(object.module) : "",
            sender: isSet(object.sender) ? String(object.sender) : "",
            txType: isSet(object.txType) ? String(object.txType) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.module !== undefined && (obj.module = message.module);
        message.sender !== undefined && (obj.sender = message.sender);
        message.txType !== undefined && (obj.txType = message.txType);
        return obj;
    },
    create(base) {
        return exports.EventMessage.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseEventMessage();
        message.module = (_a = object.module) !== null && _a !== void 0 ? _a : "";
        message.sender = (_b = object.sender) !== null && _b !== void 0 ? _b : "";
        message.txType = (_c = object.txType) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseEventBlockBloom() {
    return { bloom: "" };
}
exports.EventBlockBloom = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.bloom !== "") {
            writer.uint32(10).string(message.bloom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventBlockBloom();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.bloom = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { bloom: isSet(object.bloom) ? String(object.bloom) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.bloom !== undefined && (obj.bloom = message.bloom);
        return obj;
    },
    create(base) {
        return exports.EventBlockBloom.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseEventBlockBloom();
        message.bloom = (_a = object.bloom) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=events.js.map