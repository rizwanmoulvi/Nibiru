"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryClientImpl = exports.QueryServiceName = exports.QueryBaseFeeResponse = exports.QueryBaseFeeRequest = exports.QueryTraceBlockResponse = exports.QueryTraceBlockRequest = exports.QueryTraceTxResponse = exports.QueryTraceTxRequest = exports.EstimateGasResponse = exports.EthCallRequest = exports.QueryParamsResponse = exports.QueryParamsRequest = exports.QueryTxLogsResponse = exports.QueryTxLogsRequest = exports.QueryCodeResponse = exports.QueryCodeRequest = exports.QueryStorageResponse = exports.QueryStorageRequest = exports.QueryBalanceResponse = exports.QueryBalanceRequest = exports.QueryValidatorAccountResponse = exports.QueryValidatorAccountRequest = exports.QueryNibiruAccountResponse = exports.QueryNibiruAccountRequest = exports.QueryEthAccountResponse = exports.QueryEthAccountRequest = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const pagination_1 = require("../../../cosmos/base/query/v1beta1/pagination");
const timestamp_1 = require("../../../google/protobuf/timestamp");
const evm_1 = require("./evm");
const tx_1 = require("./tx");
function createBaseQueryEthAccountRequest() {
    return { address: "" };
}
exports.QueryEthAccountRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryEthAccountRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { address: isSet(object.address) ? String(object.address) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.address !== undefined && (obj.address = message.address);
        return obj;
    },
    create(base) {
        return exports.QueryEthAccountRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryEthAccountRequest();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryEthAccountResponse() {
    return { balance: "", codeHash: "", nonce: long_1.default.UZERO };
}
exports.QueryEthAccountResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.balance !== "") {
            writer.uint32(10).string(message.balance);
        }
        if (message.codeHash !== "") {
            writer.uint32(18).string(message.codeHash);
        }
        if (!message.nonce.isZero()) {
            writer.uint32(24).uint64(message.nonce);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryEthAccountResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.balance = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.codeHash = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.nonce = reader.uint64();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            balance: isSet(object.balance) ? String(object.balance) : "",
            codeHash: isSet(object.codeHash) ? String(object.codeHash) : "",
            nonce: isSet(object.nonce) ? long_1.default.fromValue(object.nonce) : long_1.default.UZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        message.balance !== undefined && (obj.balance = message.balance);
        message.codeHash !== undefined && (obj.codeHash = message.codeHash);
        message.nonce !== undefined && (obj.nonce = (message.nonce || long_1.default.UZERO).toString());
        return obj;
    },
    create(base) {
        return exports.QueryEthAccountResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryEthAccountResponse();
        message.balance = (_a = object.balance) !== null && _a !== void 0 ? _a : "";
        message.codeHash = (_b = object.codeHash) !== null && _b !== void 0 ? _b : "";
        message.nonce = (object.nonce !== undefined && object.nonce !== null) ? long_1.default.fromValue(object.nonce) : long_1.default.UZERO;
        return message;
    },
};
function createBaseQueryNibiruAccountRequest() {
    return { address: "" };
}
exports.QueryNibiruAccountRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryNibiruAccountRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { address: isSet(object.address) ? String(object.address) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.address !== undefined && (obj.address = message.address);
        return obj;
    },
    create(base) {
        return exports.QueryNibiruAccountRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryNibiruAccountRequest();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryNibiruAccountResponse() {
    return { address: "", sequence: long_1.default.UZERO, accountNumber: long_1.default.UZERO };
}
exports.QueryNibiruAccountResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        if (!message.sequence.isZero()) {
            writer.uint32(16).uint64(message.sequence);
        }
        if (!message.accountNumber.isZero()) {
            writer.uint32(24).uint64(message.accountNumber);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryNibiruAccountResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.sequence = reader.uint64();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.accountNumber = reader.uint64();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            address: isSet(object.address) ? String(object.address) : "",
            sequence: isSet(object.sequence) ? long_1.default.fromValue(object.sequence) : long_1.default.UZERO,
            accountNumber: isSet(object.accountNumber) ? long_1.default.fromValue(object.accountNumber) : long_1.default.UZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        message.address !== undefined && (obj.address = message.address);
        message.sequence !== undefined && (obj.sequence = (message.sequence || long_1.default.UZERO).toString());
        message.accountNumber !== undefined && (obj.accountNumber = (message.accountNumber || long_1.default.UZERO).toString());
        return obj;
    },
    create(base) {
        return exports.QueryNibiruAccountResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryNibiruAccountResponse();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : "";
        message.sequence = (object.sequence !== undefined && object.sequence !== null)
            ? long_1.default.fromValue(object.sequence)
            : long_1.default.UZERO;
        message.accountNumber = (object.accountNumber !== undefined && object.accountNumber !== null)
            ? long_1.default.fromValue(object.accountNumber)
            : long_1.default.UZERO;
        return message;
    },
};
function createBaseQueryValidatorAccountRequest() {
    return { consAddress: "" };
}
exports.QueryValidatorAccountRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.consAddress !== "") {
            writer.uint32(10).string(message.consAddress);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryValidatorAccountRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.consAddress = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { consAddress: isSet(object.consAddress) ? String(object.consAddress) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.consAddress !== undefined && (obj.consAddress = message.consAddress);
        return obj;
    },
    create(base) {
        return exports.QueryValidatorAccountRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryValidatorAccountRequest();
        message.consAddress = (_a = object.consAddress) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryValidatorAccountResponse() {
    return { accountAddress: "", sequence: long_1.default.UZERO, accountNumber: long_1.default.UZERO };
}
exports.QueryValidatorAccountResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.accountAddress !== "") {
            writer.uint32(10).string(message.accountAddress);
        }
        if (!message.sequence.isZero()) {
            writer.uint32(16).uint64(message.sequence);
        }
        if (!message.accountNumber.isZero()) {
            writer.uint32(24).uint64(message.accountNumber);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryValidatorAccountResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.accountAddress = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.sequence = reader.uint64();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.accountNumber = reader.uint64();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            accountAddress: isSet(object.accountAddress) ? String(object.accountAddress) : "",
            sequence: isSet(object.sequence) ? long_1.default.fromValue(object.sequence) : long_1.default.UZERO,
            accountNumber: isSet(object.accountNumber) ? long_1.default.fromValue(object.accountNumber) : long_1.default.UZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        message.accountAddress !== undefined && (obj.accountAddress = message.accountAddress);
        message.sequence !== undefined && (obj.sequence = (message.sequence || long_1.default.UZERO).toString());
        message.accountNumber !== undefined && (obj.accountNumber = (message.accountNumber || long_1.default.UZERO).toString());
        return obj;
    },
    create(base) {
        return exports.QueryValidatorAccountResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryValidatorAccountResponse();
        message.accountAddress = (_a = object.accountAddress) !== null && _a !== void 0 ? _a : "";
        message.sequence = (object.sequence !== undefined && object.sequence !== null)
            ? long_1.default.fromValue(object.sequence)
            : long_1.default.UZERO;
        message.accountNumber = (object.accountNumber !== undefined && object.accountNumber !== null)
            ? long_1.default.fromValue(object.accountNumber)
            : long_1.default.UZERO;
        return message;
    },
};
function createBaseQueryBalanceRequest() {
    return { address: "" };
}
exports.QueryBalanceRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryBalanceRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { address: isSet(object.address) ? String(object.address) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.address !== undefined && (obj.address = message.address);
        return obj;
    },
    create(base) {
        return exports.QueryBalanceRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryBalanceRequest();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryBalanceResponse() {
    return { balance: "" };
}
exports.QueryBalanceResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.balance !== "") {
            writer.uint32(10).string(message.balance);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryBalanceResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.balance = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { balance: isSet(object.balance) ? String(object.balance) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.balance !== undefined && (obj.balance = message.balance);
        return obj;
    },
    create(base) {
        return exports.QueryBalanceResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryBalanceResponse();
        message.balance = (_a = object.balance) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryStorageRequest() {
    return { address: "", key: "" };
}
exports.QueryStorageRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        if (message.key !== "") {
            writer.uint32(18).string(message.key);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryStorageRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            address: isSet(object.address) ? String(object.address) : "",
            key: isSet(object.key) ? String(object.key) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.address !== undefined && (obj.address = message.address);
        message.key !== undefined && (obj.key = message.key);
        return obj;
    },
    create(base) {
        return exports.QueryStorageRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryStorageRequest();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : "";
        message.key = (_b = object.key) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseQueryStorageResponse() {
    return { value: "" };
}
exports.QueryStorageResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.value !== "") {
            writer.uint32(10).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryStorageResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { value: isSet(object.value) ? String(object.value) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.value !== undefined && (obj.value = message.value);
        return obj;
    },
    create(base) {
        return exports.QueryStorageResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryStorageResponse();
        message.value = (_a = object.value) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryCodeRequest() {
    return { address: "" };
}
exports.QueryCodeRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryCodeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { address: isSet(object.address) ? String(object.address) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.address !== undefined && (obj.address = message.address);
        return obj;
    },
    create(base) {
        return exports.QueryCodeRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryCodeRequest();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryCodeResponse() {
    return { code: new Uint8Array(0) };
}
exports.QueryCodeResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.code.length !== 0) {
            writer.uint32(10).bytes(message.code);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryCodeResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.code = reader.bytes();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { code: isSet(object.code) ? bytesFromBase64(object.code) : new Uint8Array(0) };
    },
    toJSON(message) {
        const obj = {};
        message.code !== undefined &&
            (obj.code = base64FromBytes(message.code !== undefined ? message.code : new Uint8Array(0)));
        return obj;
    },
    create(base) {
        return exports.QueryCodeResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryCodeResponse();
        message.code = (_a = object.code) !== null && _a !== void 0 ? _a : new Uint8Array(0);
        return message;
    },
};
function createBaseQueryTxLogsRequest() {
    return { hash: "", pagination: undefined };
}
exports.QueryTxLogsRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.hash !== "") {
            writer.uint32(10).string(message.hash);
        }
        if (message.pagination !== undefined) {
            pagination_1.PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryTxLogsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.hash = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            hash: isSet(object.hash) ? String(object.hash) : "",
            pagination: isSet(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.hash !== undefined && (obj.hash = message.hash);
        message.pagination !== undefined &&
            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
        return obj;
    },
    create(base) {
        return exports.QueryTxLogsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryTxLogsRequest();
        message.hash = (_a = object.hash) !== null && _a !== void 0 ? _a : "";
        message.pagination = (object.pagination !== undefined && object.pagination !== null)
            ? pagination_1.PageRequest.fromPartial(object.pagination)
            : undefined;
        return message;
    },
};
function createBaseQueryTxLogsResponse() {
    return { logs: [], pagination: undefined };
}
exports.QueryTxLogsResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.logs) {
            evm_1.Log.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.pagination !== undefined) {
            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryTxLogsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.logs.push(evm_1.Log.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            logs: Array.isArray(object === null || object === void 0 ? void 0 : object.logs) ? object.logs.map((e) => evm_1.Log.fromJSON(e)) : [],
            pagination: isSet(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.logs) {
            obj.logs = message.logs.map((e) => e ? evm_1.Log.toJSON(e) : undefined);
        }
        else {
            obj.logs = [];
        }
        message.pagination !== undefined &&
            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
        return obj;
    },
    create(base) {
        return exports.QueryTxLogsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryTxLogsResponse();
        message.logs = ((_a = object.logs) === null || _a === void 0 ? void 0 : _a.map((e) => evm_1.Log.fromPartial(e))) || [];
        message.pagination = (object.pagination !== undefined && object.pagination !== null)
            ? pagination_1.PageResponse.fromPartial(object.pagination)
            : undefined;
        return message;
    },
};
function createBaseQueryParamsRequest() {
    return {};
}
exports.QueryParamsRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.QueryParamsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseQueryParamsRequest();
        return message;
    },
};
function createBaseQueryParamsResponse() {
    return { params: undefined };
}
exports.QueryParamsResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.params !== undefined) {
            evm_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.params = evm_1.Params.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { params: isSet(object.params) ? evm_1.Params.fromJSON(object.params) : undefined };
    },
    toJSON(message) {
        const obj = {};
        message.params !== undefined && (obj.params = message.params ? evm_1.Params.toJSON(message.params) : undefined);
        return obj;
    },
    create(base) {
        return exports.QueryParamsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryParamsResponse();
        message.params = (object.params !== undefined && object.params !== null)
            ? evm_1.Params.fromPartial(object.params)
            : undefined;
        return message;
    },
};
function createBaseEthCallRequest() {
    return { args: new Uint8Array(0), gasCap: long_1.default.UZERO, proposerAddress: new Uint8Array(0), chainId: long_1.default.ZERO };
}
exports.EthCallRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.args.length !== 0) {
            writer.uint32(10).bytes(message.args);
        }
        if (!message.gasCap.isZero()) {
            writer.uint32(16).uint64(message.gasCap);
        }
        if (message.proposerAddress.length !== 0) {
            writer.uint32(26).bytes(message.proposerAddress);
        }
        if (!message.chainId.isZero()) {
            writer.uint32(32).int64(message.chainId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEthCallRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.args = reader.bytes();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.gasCap = reader.uint64();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.proposerAddress = reader.bytes();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.chainId = reader.int64();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            args: isSet(object.args) ? bytesFromBase64(object.args) : new Uint8Array(0),
            gasCap: isSet(object.gasCap) ? long_1.default.fromValue(object.gasCap) : long_1.default.UZERO,
            proposerAddress: isSet(object.proposerAddress) ? bytesFromBase64(object.proposerAddress) : new Uint8Array(0),
            chainId: isSet(object.chainId) ? long_1.default.fromValue(object.chainId) : long_1.default.ZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        message.args !== undefined &&
            (obj.args = base64FromBytes(message.args !== undefined ? message.args : new Uint8Array(0)));
        message.gasCap !== undefined && (obj.gasCap = (message.gasCap || long_1.default.UZERO).toString());
        message.proposerAddress !== undefined &&
            (obj.proposerAddress = base64FromBytes(message.proposerAddress !== undefined ? message.proposerAddress : new Uint8Array(0)));
        message.chainId !== undefined && (obj.chainId = (message.chainId || long_1.default.ZERO).toString());
        return obj;
    },
    create(base) {
        return exports.EthCallRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseEthCallRequest();
        message.args = (_a = object.args) !== null && _a !== void 0 ? _a : new Uint8Array(0);
        message.gasCap = (object.gasCap !== undefined && object.gasCap !== null)
            ? long_1.default.fromValue(object.gasCap)
            : long_1.default.UZERO;
        message.proposerAddress = (_b = object.proposerAddress) !== null && _b !== void 0 ? _b : new Uint8Array(0);
        message.chainId = (object.chainId !== undefined && object.chainId !== null)
            ? long_1.default.fromValue(object.chainId)
            : long_1.default.ZERO;
        return message;
    },
};
function createBaseEstimateGasResponse() {
    return { gas: long_1.default.UZERO };
}
exports.EstimateGasResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (!message.gas.isZero()) {
            writer.uint32(8).uint64(message.gas);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEstimateGasResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.gas = reader.uint64();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { gas: isSet(object.gas) ? long_1.default.fromValue(object.gas) : long_1.default.UZERO };
    },
    toJSON(message) {
        const obj = {};
        message.gas !== undefined && (obj.gas = (message.gas || long_1.default.UZERO).toString());
        return obj;
    },
    create(base) {
        return exports.EstimateGasResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseEstimateGasResponse();
        message.gas = (object.gas !== undefined && object.gas !== null) ? long_1.default.fromValue(object.gas) : long_1.default.UZERO;
        return message;
    },
};
function createBaseQueryTraceTxRequest() {
    return {
        msg: undefined,
        traceConfig: undefined,
        predecessors: [],
        blockNumber: long_1.default.ZERO,
        blockHash: "",
        blockTime: undefined,
        proposerAddress: new Uint8Array(0),
        chainId: long_1.default.ZERO,
        blockMaxGas: long_1.default.ZERO,
    };
}
exports.QueryTraceTxRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.msg !== undefined) {
            tx_1.MsgEthereumTx.encode(message.msg, writer.uint32(10).fork()).ldelim();
        }
        if (message.traceConfig !== undefined) {
            evm_1.TraceConfig.encode(message.traceConfig, writer.uint32(26).fork()).ldelim();
        }
        for (const v of message.predecessors) {
            tx_1.MsgEthereumTx.encode(v, writer.uint32(34).fork()).ldelim();
        }
        if (!message.blockNumber.isZero()) {
            writer.uint32(40).int64(message.blockNumber);
        }
        if (message.blockHash !== "") {
            writer.uint32(50).string(message.blockHash);
        }
        if (message.blockTime !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.blockTime), writer.uint32(58).fork()).ldelim();
        }
        if (message.proposerAddress.length !== 0) {
            writer.uint32(66).bytes(message.proposerAddress);
        }
        if (!message.chainId.isZero()) {
            writer.uint32(72).int64(message.chainId);
        }
        if (!message.blockMaxGas.isZero()) {
            writer.uint32(80).int64(message.blockMaxGas);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryTraceTxRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.msg = tx_1.MsgEthereumTx.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.traceConfig = evm_1.TraceConfig.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.predecessors.push(tx_1.MsgEthereumTx.decode(reader, reader.uint32()));
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.blockNumber = reader.int64();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.blockHash = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.blockTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.proposerAddress = reader.bytes();
                    continue;
                case 9:
                    if (tag !== 72) {
                        break;
                    }
                    message.chainId = reader.int64();
                    continue;
                case 10:
                    if (tag !== 80) {
                        break;
                    }
                    message.blockMaxGas = reader.int64();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            msg: isSet(object.msg) ? tx_1.MsgEthereumTx.fromJSON(object.msg) : undefined,
            traceConfig: isSet(object.traceConfig) ? evm_1.TraceConfig.fromJSON(object.traceConfig) : undefined,
            predecessors: Array.isArray(object === null || object === void 0 ? void 0 : object.predecessors)
                ? object.predecessors.map((e) => tx_1.MsgEthereumTx.fromJSON(e))
                : [],
            blockNumber: isSet(object.blockNumber) ? long_1.default.fromValue(object.blockNumber) : long_1.default.ZERO,
            blockHash: isSet(object.blockHash) ? String(object.blockHash) : "",
            blockTime: isSet(object.blockTime) ? fromJsonTimestamp(object.blockTime) : undefined,
            proposerAddress: isSet(object.proposerAddress) ? bytesFromBase64(object.proposerAddress) : new Uint8Array(0),
            chainId: isSet(object.chainId) ? long_1.default.fromValue(object.chainId) : long_1.default.ZERO,
            blockMaxGas: isSet(object.blockMaxGas) ? long_1.default.fromValue(object.blockMaxGas) : long_1.default.ZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        message.msg !== undefined && (obj.msg = message.msg ? tx_1.MsgEthereumTx.toJSON(message.msg) : undefined);
        message.traceConfig !== undefined &&
            (obj.traceConfig = message.traceConfig ? evm_1.TraceConfig.toJSON(message.traceConfig) : undefined);
        if (message.predecessors) {
            obj.predecessors = message.predecessors.map((e) => e ? tx_1.MsgEthereumTx.toJSON(e) : undefined);
        }
        else {
            obj.predecessors = [];
        }
        message.blockNumber !== undefined && (obj.blockNumber = (message.blockNumber || long_1.default.ZERO).toString());
        message.blockHash !== undefined && (obj.blockHash = message.blockHash);
        message.blockTime !== undefined && (obj.blockTime = message.blockTime.toISOString());
        message.proposerAddress !== undefined &&
            (obj.proposerAddress = base64FromBytes(message.proposerAddress !== undefined ? message.proposerAddress : new Uint8Array(0)));
        message.chainId !== undefined && (obj.chainId = (message.chainId || long_1.default.ZERO).toString());
        message.blockMaxGas !== undefined && (obj.blockMaxGas = (message.blockMaxGas || long_1.default.ZERO).toString());
        return obj;
    },
    create(base) {
        return exports.QueryTraceTxRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseQueryTraceTxRequest();
        message.msg = (object.msg !== undefined && object.msg !== null) ? tx_1.MsgEthereumTx.fromPartial(object.msg) : undefined;
        message.traceConfig = (object.traceConfig !== undefined && object.traceConfig !== null)
            ? evm_1.TraceConfig.fromPartial(object.traceConfig)
            : undefined;
        message.predecessors = ((_a = object.predecessors) === null || _a === void 0 ? void 0 : _a.map((e) => tx_1.MsgEthereumTx.fromPartial(e))) || [];
        message.blockNumber = (object.blockNumber !== undefined && object.blockNumber !== null)
            ? long_1.default.fromValue(object.blockNumber)
            : long_1.default.ZERO;
        message.blockHash = (_b = object.blockHash) !== null && _b !== void 0 ? _b : "";
        message.blockTime = (_c = object.blockTime) !== null && _c !== void 0 ? _c : undefined;
        message.proposerAddress = (_d = object.proposerAddress) !== null && _d !== void 0 ? _d : new Uint8Array(0);
        message.chainId = (object.chainId !== undefined && object.chainId !== null)
            ? long_1.default.fromValue(object.chainId)
            : long_1.default.ZERO;
        message.blockMaxGas = (object.blockMaxGas !== undefined && object.blockMaxGas !== null)
            ? long_1.default.fromValue(object.blockMaxGas)
            : long_1.default.ZERO;
        return message;
    },
};
function createBaseQueryTraceTxResponse() {
    return { data: new Uint8Array(0) };
}
exports.QueryTraceTxResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.data.length !== 0) {
            writer.uint32(10).bytes(message.data);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryTraceTxResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.data = reader.bytes();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0) };
    },
    toJSON(message) {
        const obj = {};
        message.data !== undefined &&
            (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array(0)));
        return obj;
    },
    create(base) {
        return exports.QueryTraceTxResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryTraceTxResponse();
        message.data = (_a = object.data) !== null && _a !== void 0 ? _a : new Uint8Array(0);
        return message;
    },
};
function createBaseQueryTraceBlockRequest() {
    return {
        txs: [],
        traceConfig: undefined,
        blockNumber: long_1.default.ZERO,
        blockHash: "",
        blockTime: undefined,
        proposerAddress: new Uint8Array(0),
        chainId: long_1.default.ZERO,
        blockMaxGas: long_1.default.ZERO,
    };
}
exports.QueryTraceBlockRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.txs) {
            tx_1.MsgEthereumTx.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.traceConfig !== undefined) {
            evm_1.TraceConfig.encode(message.traceConfig, writer.uint32(26).fork()).ldelim();
        }
        if (!message.blockNumber.isZero()) {
            writer.uint32(40).int64(message.blockNumber);
        }
        if (message.blockHash !== "") {
            writer.uint32(50).string(message.blockHash);
        }
        if (message.blockTime !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.blockTime), writer.uint32(58).fork()).ldelim();
        }
        if (message.proposerAddress.length !== 0) {
            writer.uint32(66).bytes(message.proposerAddress);
        }
        if (!message.chainId.isZero()) {
            writer.uint32(72).int64(message.chainId);
        }
        if (!message.blockMaxGas.isZero()) {
            writer.uint32(80).int64(message.blockMaxGas);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryTraceBlockRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.txs.push(tx_1.MsgEthereumTx.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.traceConfig = evm_1.TraceConfig.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.blockNumber = reader.int64();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.blockHash = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.blockTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.proposerAddress = reader.bytes();
                    continue;
                case 9:
                    if (tag !== 72) {
                        break;
                    }
                    message.chainId = reader.int64();
                    continue;
                case 10:
                    if (tag !== 80) {
                        break;
                    }
                    message.blockMaxGas = reader.int64();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            txs: Array.isArray(object === null || object === void 0 ? void 0 : object.txs) ? object.txs.map((e) => tx_1.MsgEthereumTx.fromJSON(e)) : [],
            traceConfig: isSet(object.traceConfig) ? evm_1.TraceConfig.fromJSON(object.traceConfig) : undefined,
            blockNumber: isSet(object.blockNumber) ? long_1.default.fromValue(object.blockNumber) : long_1.default.ZERO,
            blockHash: isSet(object.blockHash) ? String(object.blockHash) : "",
            blockTime: isSet(object.blockTime) ? fromJsonTimestamp(object.blockTime) : undefined,
            proposerAddress: isSet(object.proposerAddress) ? bytesFromBase64(object.proposerAddress) : new Uint8Array(0),
            chainId: isSet(object.chainId) ? long_1.default.fromValue(object.chainId) : long_1.default.ZERO,
            blockMaxGas: isSet(object.blockMaxGas) ? long_1.default.fromValue(object.blockMaxGas) : long_1.default.ZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.txs) {
            obj.txs = message.txs.map((e) => e ? tx_1.MsgEthereumTx.toJSON(e) : undefined);
        }
        else {
            obj.txs = [];
        }
        message.traceConfig !== undefined &&
            (obj.traceConfig = message.traceConfig ? evm_1.TraceConfig.toJSON(message.traceConfig) : undefined);
        message.blockNumber !== undefined && (obj.blockNumber = (message.blockNumber || long_1.default.ZERO).toString());
        message.blockHash !== undefined && (obj.blockHash = message.blockHash);
        message.blockTime !== undefined && (obj.blockTime = message.blockTime.toISOString());
        message.proposerAddress !== undefined &&
            (obj.proposerAddress = base64FromBytes(message.proposerAddress !== undefined ? message.proposerAddress : new Uint8Array(0)));
        message.chainId !== undefined && (obj.chainId = (message.chainId || long_1.default.ZERO).toString());
        message.blockMaxGas !== undefined && (obj.blockMaxGas = (message.blockMaxGas || long_1.default.ZERO).toString());
        return obj;
    },
    create(base) {
        return exports.QueryTraceBlockRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseQueryTraceBlockRequest();
        message.txs = ((_a = object.txs) === null || _a === void 0 ? void 0 : _a.map((e) => tx_1.MsgEthereumTx.fromPartial(e))) || [];
        message.traceConfig = (object.traceConfig !== undefined && object.traceConfig !== null)
            ? evm_1.TraceConfig.fromPartial(object.traceConfig)
            : undefined;
        message.blockNumber = (object.blockNumber !== undefined && object.blockNumber !== null)
            ? long_1.default.fromValue(object.blockNumber)
            : long_1.default.ZERO;
        message.blockHash = (_b = object.blockHash) !== null && _b !== void 0 ? _b : "";
        message.blockTime = (_c = object.blockTime) !== null && _c !== void 0 ? _c : undefined;
        message.proposerAddress = (_d = object.proposerAddress) !== null && _d !== void 0 ? _d : new Uint8Array(0);
        message.chainId = (object.chainId !== undefined && object.chainId !== null)
            ? long_1.default.fromValue(object.chainId)
            : long_1.default.ZERO;
        message.blockMaxGas = (object.blockMaxGas !== undefined && object.blockMaxGas !== null)
            ? long_1.default.fromValue(object.blockMaxGas)
            : long_1.default.ZERO;
        return message;
    },
};
function createBaseQueryTraceBlockResponse() {
    return { data: new Uint8Array(0) };
}
exports.QueryTraceBlockResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.data.length !== 0) {
            writer.uint32(10).bytes(message.data);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryTraceBlockResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.data = reader.bytes();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0) };
    },
    toJSON(message) {
        const obj = {};
        message.data !== undefined &&
            (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array(0)));
        return obj;
    },
    create(base) {
        return exports.QueryTraceBlockResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryTraceBlockResponse();
        message.data = (_a = object.data) !== null && _a !== void 0 ? _a : new Uint8Array(0);
        return message;
    },
};
function createBaseQueryBaseFeeRequest() {
    return {};
}
exports.QueryBaseFeeRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryBaseFeeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.QueryBaseFeeRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseQueryBaseFeeRequest();
        return message;
    },
};
function createBaseQueryBaseFeeResponse() {
    return { baseFee: "" };
}
exports.QueryBaseFeeResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.baseFee !== "") {
            writer.uint32(10).string(message.baseFee);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryBaseFeeResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.baseFee = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { baseFee: isSet(object.baseFee) ? String(object.baseFee) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.baseFee !== undefined && (obj.baseFee = message.baseFee);
        return obj;
    },
    create(base) {
        return exports.QueryBaseFeeResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryBaseFeeResponse();
        message.baseFee = (_a = object.baseFee) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
exports.QueryServiceName = "eth.evm.v1.Query";
class QueryClientImpl {
    constructor(rpc, opts) {
        this.service = (opts === null || opts === void 0 ? void 0 : opts.service) || exports.QueryServiceName;
        this.rpc = rpc;
        this.EthAccount = this.EthAccount.bind(this);
        this.NibiruAccount = this.NibiruAccount.bind(this);
        this.ValidatorAccount = this.ValidatorAccount.bind(this);
        this.Balance = this.Balance.bind(this);
        this.Storage = this.Storage.bind(this);
        this.Code = this.Code.bind(this);
        this.Params = this.Params.bind(this);
        this.EthCall = this.EthCall.bind(this);
        this.EstimateGas = this.EstimateGas.bind(this);
        this.TraceTx = this.TraceTx.bind(this);
        this.TraceBlock = this.TraceBlock.bind(this);
        this.BaseFee = this.BaseFee.bind(this);
    }
    EthAccount(request) {
        const data = exports.QueryEthAccountRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "EthAccount", data);
        return promise.then((data) => exports.QueryEthAccountResponse.decode(minimal_1.default.Reader.create(data)));
    }
    NibiruAccount(request) {
        const data = exports.QueryNibiruAccountRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "NibiruAccount", data);
        return promise.then((data) => exports.QueryNibiruAccountResponse.decode(minimal_1.default.Reader.create(data)));
    }
    ValidatorAccount(request) {
        const data = exports.QueryValidatorAccountRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "ValidatorAccount", data);
        return promise.then((data) => exports.QueryValidatorAccountResponse.decode(minimal_1.default.Reader.create(data)));
    }
    Balance(request) {
        const data = exports.QueryBalanceRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Balance", data);
        return promise.then((data) => exports.QueryBalanceResponse.decode(minimal_1.default.Reader.create(data)));
    }
    Storage(request) {
        const data = exports.QueryStorageRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Storage", data);
        return promise.then((data) => exports.QueryStorageResponse.decode(minimal_1.default.Reader.create(data)));
    }
    Code(request) {
        const data = exports.QueryCodeRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Code", data);
        return promise.then((data) => exports.QueryCodeResponse.decode(minimal_1.default.Reader.create(data)));
    }
    Params(request) {
        const data = exports.QueryParamsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Params", data);
        return promise.then((data) => exports.QueryParamsResponse.decode(minimal_1.default.Reader.create(data)));
    }
    EthCall(request) {
        const data = exports.EthCallRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "EthCall", data);
        return promise.then((data) => tx_1.MsgEthereumTxResponse.decode(minimal_1.default.Reader.create(data)));
    }
    EstimateGas(request) {
        const data = exports.EthCallRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "EstimateGas", data);
        return promise.then((data) => exports.EstimateGasResponse.decode(minimal_1.default.Reader.create(data)));
    }
    TraceTx(request) {
        const data = exports.QueryTraceTxRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "TraceTx", data);
        return promise.then((data) => exports.QueryTraceTxResponse.decode(minimal_1.default.Reader.create(data)));
    }
    TraceBlock(request) {
        const data = exports.QueryTraceBlockRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "TraceBlock", data);
        return promise.then((data) => exports.QueryTraceBlockResponse.decode(minimal_1.default.Reader.create(data)));
    }
    BaseFee(request) {
        const data = exports.QueryBaseFeeRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "BaseFee", data);
        return promise.then((data) => exports.QueryBaseFeeResponse.decode(minimal_1.default.Reader.create(data)));
    }
}
exports.QueryClientImpl = QueryClientImpl;
var tsProtoGlobalThis = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function bytesFromBase64(b64) {
    if (tsProtoGlobalThis.Buffer) {
        return Uint8Array.from(tsProtoGlobalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = tsProtoGlobalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (tsProtoGlobalThis.Buffer) {
        return tsProtoGlobalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(String.fromCharCode(byte));
        });
        return tsProtoGlobalThis.btoa(bin.join(""));
    }
}
function toTimestamp(date) {
    const seconds = numberToLong(date.getTime() / 1000);
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds.toNumber() || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function numberToLong(number) {
    return long_1.default.fromNumber(number);
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=query.js.map