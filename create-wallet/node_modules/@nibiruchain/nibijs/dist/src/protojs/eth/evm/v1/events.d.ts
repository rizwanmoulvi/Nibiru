import _m0 from "protobufjs/minimal";
/** Copyright (c) 2023-2024 Nibi, Inc. */
/** EventEthereumTx defines the event for an Ethereum transaction */
export interface EventEthereumTx {
    /** amount */
    amount: string;
    /** eth_hash is the Ethereum hash of the transaction */
    ethHash: string;
    /** index of the transaction in the block */
    index: string;
    /** gas_used is the amount of gas used by the transaction */
    gasUsed: string;
    /** hash is the Tendermint hash of the transaction */
    hash: string;
    /** recipient of the transaction */
    recipient: string;
    /** eth_tx_failed contains a VM error should it occur */
    ethTxFailed: string;
}
/** EventTxLog defines the event for an Ethereum transaction log */
export interface EventTxLog {
    /** tx_logs is an array of transaction logs */
    txLogs: string[];
}
/** EventMessage */
export interface EventMessage {
    /** module which emits the event */
    module: string;
    /** sender of the message */
    sender: string;
    /** tx_type is the type of the message */
    txType: string;
}
/** EventBlockBloom defines an Ethereum block bloom filter event */
export interface EventBlockBloom {
    /** bloom is the bloom filter of the block */
    bloom: string;
}
export declare const EventEthereumTx: {
    encode(message: EventEthereumTx, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventEthereumTx;
    fromJSON(object: any): EventEthereumTx;
    toJSON(message: EventEthereumTx): unknown;
    create<I extends {
        amount?: string | undefined;
        ethHash?: string | undefined;
        index?: string | undefined;
        gasUsed?: string | undefined;
        hash?: string | undefined;
        recipient?: string | undefined;
        ethTxFailed?: string | undefined;
    } & {
        amount?: string | undefined;
        ethHash?: string | undefined;
        index?: string | undefined;
        gasUsed?: string | undefined;
        hash?: string | undefined;
        recipient?: string | undefined;
        ethTxFailed?: string | undefined;
    } & { [K in Exclude<keyof I, keyof EventEthereumTx>]: never; }>(base?: I | undefined): EventEthereumTx;
    fromPartial<I_1 extends {
        amount?: string | undefined;
        ethHash?: string | undefined;
        index?: string | undefined;
        gasUsed?: string | undefined;
        hash?: string | undefined;
        recipient?: string | undefined;
        ethTxFailed?: string | undefined;
    } & {
        amount?: string | undefined;
        ethHash?: string | undefined;
        index?: string | undefined;
        gasUsed?: string | undefined;
        hash?: string | undefined;
        recipient?: string | undefined;
        ethTxFailed?: string | undefined;
    } & { [K_1 in Exclude<keyof I_1, keyof EventEthereumTx>]: never; }>(object: I_1): EventEthereumTx;
};
export declare const EventTxLog: {
    encode(message: EventTxLog, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventTxLog;
    fromJSON(object: any): EventTxLog;
    toJSON(message: EventTxLog): unknown;
    create<I extends {
        txLogs?: string[] | undefined;
    } & {
        txLogs?: (string[] & string[] & { [K in Exclude<keyof I["txLogs"], keyof string[]>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "txLogs">]: never; }>(base?: I | undefined): EventTxLog;
    fromPartial<I_1 extends {
        txLogs?: string[] | undefined;
    } & {
        txLogs?: (string[] & string[] & { [K_2 in Exclude<keyof I_1["txLogs"], keyof string[]>]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I_1, "txLogs">]: never; }>(object: I_1): EventTxLog;
};
export declare const EventMessage: {
    encode(message: EventMessage, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventMessage;
    fromJSON(object: any): EventMessage;
    toJSON(message: EventMessage): unknown;
    create<I extends {
        module?: string | undefined;
        sender?: string | undefined;
        txType?: string | undefined;
    } & {
        module?: string | undefined;
        sender?: string | undefined;
        txType?: string | undefined;
    } & { [K in Exclude<keyof I, keyof EventMessage>]: never; }>(base?: I | undefined): EventMessage;
    fromPartial<I_1 extends {
        module?: string | undefined;
        sender?: string | undefined;
        txType?: string | undefined;
    } & {
        module?: string | undefined;
        sender?: string | undefined;
        txType?: string | undefined;
    } & { [K_1 in Exclude<keyof I_1, keyof EventMessage>]: never; }>(object: I_1): EventMessage;
};
export declare const EventBlockBloom: {
    encode(message: EventBlockBloom, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventBlockBloom;
    fromJSON(object: any): EventBlockBloom;
    toJSON(message: EventBlockBloom): unknown;
    create<I extends {
        bloom?: string | undefined;
    } & {
        bloom?: string | undefined;
    } & { [K in Exclude<keyof I, "bloom">]: never; }>(base?: I | undefined): EventBlockBloom;
    fromPartial<I_1 extends {
        bloom?: string | undefined;
    } & {
        bloom?: string | undefined;
    } & { [K_1 in Exclude<keyof I_1, "bloom">]: never; }>(object: I_1): EventBlockBloom;
};
//# sourceMappingURL=events.d.ts.map