import Long from "long";
import _m0 from "protobufjs/minimal";
import { FunToken, Params, State } from "./evm";
/** Copyright (c) 2023-2024 Nibi, Inc. */
/** GenesisState defines the evm module's genesis state. */
export interface GenesisState {
    /** accounts is an array containing the ethereum genesis accounts. */
    accounts: GenesisAccount[];
    /** params defines all the parameters of the module. */
    params?: Params;
    /** Fungible token mappings corresponding to ERC-20 smart contract tokens. */
    funtokenMappings: FunToken[];
}
/**
 * GenesisAccount defines an account to be initialized in the genesis state.
 * Its main difference between with Geth's GenesisAccount is that it uses a
 * custom storage type and that it doesn't contain the private key field.
 */
export interface GenesisAccount {
    /** address defines an ethereum hex formated address of an account */
    address: string;
    /** code defines the hex bytes of the account code. */
    code: string;
    /** storage defines the set of state key values for the account. */
    storage: State[];
}
export declare const GenesisState: {
    encode(message: GenesisState, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GenesisState;
    fromJSON(object: any): GenesisState;
    toJSON(message: GenesisState): unknown;
    create<I extends {
        accounts?: {
            address?: string | undefined;
            code?: string | undefined;
            storage?: {
                key?: string | undefined;
                value?: string | undefined;
            }[] | undefined;
        }[] | undefined;
        params?: {
            evmDenom?: string | undefined;
            enableCreate?: boolean | undefined;
            enableCall?: boolean | undefined;
            extraEips?: (string | number | Long)[] | undefined;
            allowUnprotectedTxs?: boolean | undefined;
            activePrecompiles?: string[] | undefined;
            evmChannels?: string[] | undefined;
        } | undefined;
        funtokenMappings?: {
            erc20Addr?: string | undefined;
            bankDenom?: string | undefined;
            isMadeFromCoin?: boolean | undefined;
        }[] | undefined;
    } & {
        accounts?: ({
            address?: string | undefined;
            code?: string | undefined;
            storage?: {
                key?: string | undefined;
                value?: string | undefined;
            }[] | undefined;
        }[] & ({
            address?: string | undefined;
            code?: string | undefined;
            storage?: {
                key?: string | undefined;
                value?: string | undefined;
            }[] | undefined;
        } & {
            address?: string | undefined;
            code?: string | undefined;
            storage?: ({
                key?: string | undefined;
                value?: string | undefined;
            }[] & ({
                key?: string | undefined;
                value?: string | undefined;
            } & {
                key?: string | undefined;
                value?: string | undefined;
            } & { [K in Exclude<keyof I["accounts"][number]["storage"][number], keyof State>]: never; })[] & { [K_1 in Exclude<keyof I["accounts"][number]["storage"], keyof {
                key?: string | undefined;
                value?: string | undefined;
            }[]>]: never; }) | undefined;
        } & { [K_2 in Exclude<keyof I["accounts"][number], keyof GenesisAccount>]: never; })[] & { [K_3 in Exclude<keyof I["accounts"], keyof {
            address?: string | undefined;
            code?: string | undefined;
            storage?: {
                key?: string | undefined;
                value?: string | undefined;
            }[] | undefined;
        }[]>]: never; }) | undefined;
        params?: ({
            evmDenom?: string | undefined;
            enableCreate?: boolean | undefined;
            enableCall?: boolean | undefined;
            extraEips?: (string | number | Long)[] | undefined;
            allowUnprotectedTxs?: boolean | undefined;
            activePrecompiles?: string[] | undefined;
            evmChannels?: string[] | undefined;
        } & {
            evmDenom?: string | undefined;
            enableCreate?: boolean | undefined;
            enableCall?: boolean | undefined;
            extraEips?: ((string | number | Long)[] & (string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_4 in Exclude<keyof I["params"]["extraEips"][number], keyof Long>]: never; }))[] & { [K_5 in Exclude<keyof I["params"]["extraEips"], keyof (string | number | Long)[]>]: never; }) | undefined;
            allowUnprotectedTxs?: boolean | undefined;
            activePrecompiles?: (string[] & string[] & { [K_6 in Exclude<keyof I["params"]["activePrecompiles"], keyof string[]>]: never; }) | undefined;
            evmChannels?: (string[] & string[] & { [K_7 in Exclude<keyof I["params"]["evmChannels"], keyof string[]>]: never; }) | undefined;
        } & { [K_8 in Exclude<keyof I["params"], keyof Params>]: never; }) | undefined;
        funtokenMappings?: ({
            erc20Addr?: string | undefined;
            bankDenom?: string | undefined;
            isMadeFromCoin?: boolean | undefined;
        }[] & ({
            erc20Addr?: string | undefined;
            bankDenom?: string | undefined;
            isMadeFromCoin?: boolean | undefined;
        } & {
            erc20Addr?: string | undefined;
            bankDenom?: string | undefined;
            isMadeFromCoin?: boolean | undefined;
        } & { [K_9 in Exclude<keyof I["funtokenMappings"][number], keyof FunToken>]: never; })[] & { [K_10 in Exclude<keyof I["funtokenMappings"], keyof {
            erc20Addr?: string | undefined;
            bankDenom?: string | undefined;
            isMadeFromCoin?: boolean | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_11 in Exclude<keyof I, keyof GenesisState>]: never; }>(base?: I | undefined): GenesisState;
    fromPartial<I_1 extends {
        accounts?: {
            address?: string | undefined;
            code?: string | undefined;
            storage?: {
                key?: string | undefined;
                value?: string | undefined;
            }[] | undefined;
        }[] | undefined;
        params?: {
            evmDenom?: string | undefined;
            enableCreate?: boolean | undefined;
            enableCall?: boolean | undefined;
            extraEips?: (string | number | Long)[] | undefined;
            allowUnprotectedTxs?: boolean | undefined;
            activePrecompiles?: string[] | undefined;
            evmChannels?: string[] | undefined;
        } | undefined;
        funtokenMappings?: {
            erc20Addr?: string | undefined;
            bankDenom?: string | undefined;
            isMadeFromCoin?: boolean | undefined;
        }[] | undefined;
    } & {
        accounts?: ({
            address?: string | undefined;
            code?: string | undefined;
            storage?: {
                key?: string | undefined;
                value?: string | undefined;
            }[] | undefined;
        }[] & ({
            address?: string | undefined;
            code?: string | undefined;
            storage?: {
                key?: string | undefined;
                value?: string | undefined;
            }[] | undefined;
        } & {
            address?: string | undefined;
            code?: string | undefined;
            storage?: ({
                key?: string | undefined;
                value?: string | undefined;
            }[] & ({
                key?: string | undefined;
                value?: string | undefined;
            } & {
                key?: string | undefined;
                value?: string | undefined;
            } & { [K_12 in Exclude<keyof I_1["accounts"][number]["storage"][number], keyof State>]: never; })[] & { [K_13 in Exclude<keyof I_1["accounts"][number]["storage"], keyof {
                key?: string | undefined;
                value?: string | undefined;
            }[]>]: never; }) | undefined;
        } & { [K_14 in Exclude<keyof I_1["accounts"][number], keyof GenesisAccount>]: never; })[] & { [K_15 in Exclude<keyof I_1["accounts"], keyof {
            address?: string | undefined;
            code?: string | undefined;
            storage?: {
                key?: string | undefined;
                value?: string | undefined;
            }[] | undefined;
        }[]>]: never; }) | undefined;
        params?: ({
            evmDenom?: string | undefined;
            enableCreate?: boolean | undefined;
            enableCall?: boolean | undefined;
            extraEips?: (string | number | Long)[] | undefined;
            allowUnprotectedTxs?: boolean | undefined;
            activePrecompiles?: string[] | undefined;
            evmChannels?: string[] | undefined;
        } & {
            evmDenom?: string | undefined;
            enableCreate?: boolean | undefined;
            enableCall?: boolean | undefined;
            extraEips?: ((string | number | Long)[] & (string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_16 in Exclude<keyof I_1["params"]["extraEips"][number], keyof Long>]: never; }))[] & { [K_17 in Exclude<keyof I_1["params"]["extraEips"], keyof (string | number | Long)[]>]: never; }) | undefined;
            allowUnprotectedTxs?: boolean | undefined;
            activePrecompiles?: (string[] & string[] & { [K_18 in Exclude<keyof I_1["params"]["activePrecompiles"], keyof string[]>]: never; }) | undefined;
            evmChannels?: (string[] & string[] & { [K_19 in Exclude<keyof I_1["params"]["evmChannels"], keyof string[]>]: never; }) | undefined;
        } & { [K_20 in Exclude<keyof I_1["params"], keyof Params>]: never; }) | undefined;
        funtokenMappings?: ({
            erc20Addr?: string | undefined;
            bankDenom?: string | undefined;
            isMadeFromCoin?: boolean | undefined;
        }[] & ({
            erc20Addr?: string | undefined;
            bankDenom?: string | undefined;
            isMadeFromCoin?: boolean | undefined;
        } & {
            erc20Addr?: string | undefined;
            bankDenom?: string | undefined;
            isMadeFromCoin?: boolean | undefined;
        } & { [K_21 in Exclude<keyof I_1["funtokenMappings"][number], keyof FunToken>]: never; })[] & { [K_22 in Exclude<keyof I_1["funtokenMappings"], keyof {
            erc20Addr?: string | undefined;
            bankDenom?: string | undefined;
            isMadeFromCoin?: boolean | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_23 in Exclude<keyof I_1, keyof GenesisState>]: never; }>(object: I_1): GenesisState;
};
export declare const GenesisAccount: {
    encode(message: GenesisAccount, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GenesisAccount;
    fromJSON(object: any): GenesisAccount;
    toJSON(message: GenesisAccount): unknown;
    create<I extends {
        address?: string | undefined;
        code?: string | undefined;
        storage?: {
            key?: string | undefined;
            value?: string | undefined;
        }[] | undefined;
    } & {
        address?: string | undefined;
        code?: string | undefined;
        storage?: ({
            key?: string | undefined;
            value?: string | undefined;
        }[] & ({
            key?: string | undefined;
            value?: string | undefined;
        } & {
            key?: string | undefined;
            value?: string | undefined;
        } & { [K in Exclude<keyof I["storage"][number], keyof State>]: never; })[] & { [K_1 in Exclude<keyof I["storage"], keyof {
            key?: string | undefined;
            value?: string | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, keyof GenesisAccount>]: never; }>(base?: I | undefined): GenesisAccount;
    fromPartial<I_1 extends {
        address?: string | undefined;
        code?: string | undefined;
        storage?: {
            key?: string | undefined;
            value?: string | undefined;
        }[] | undefined;
    } & {
        address?: string | undefined;
        code?: string | undefined;
        storage?: ({
            key?: string | undefined;
            value?: string | undefined;
        }[] & ({
            key?: string | undefined;
            value?: string | undefined;
        } & {
            key?: string | undefined;
            value?: string | undefined;
        } & { [K_3 in Exclude<keyof I_1["storage"][number], keyof State>]: never; })[] & { [K_4 in Exclude<keyof I_1["storage"], keyof {
            key?: string | undefined;
            value?: string | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_5 in Exclude<keyof I_1, keyof GenesisAccount>]: never; }>(object: I_1): GenesisAccount;
};
//# sourceMappingURL=genesis.d.ts.map