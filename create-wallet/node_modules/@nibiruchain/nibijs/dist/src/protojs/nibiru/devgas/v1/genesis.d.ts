import _m0 from "protobufjs/minimal";
import { FeeShare } from "./devgas";
/** GenesisState defines the module's genesis state. */
export interface GenesisState {
    /** params are the feeshare module parameters */
    params?: ModuleParams;
    /** FeeShare is a slice of active registered contracts for fee distribution */
    feeShare: FeeShare[];
}
/** ModuleParams defines the params for the devgas module */
export interface ModuleParams {
    /** enable_feeshare defines a parameter to enable the feeshare module */
    enableFeeShare: boolean;
    /**
     * developer_shares defines the proportion of the transaction fees to be
     * distributed to the registered contract owner
     */
    developerShares: string;
    /**
     * allowed_denoms defines the list of denoms that are allowed to be paid to
     * the contract withdraw addresses. If said denom is not in the list, the fees
     * will ONLY be sent to the community pool.
     * If this list is empty, all denoms are allowed.
     */
    allowedDenoms: string[];
}
export declare const GenesisState: {
    encode(message: GenesisState, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GenesisState;
    fromJSON(object: any): GenesisState;
    toJSON(message: GenesisState): unknown;
    create<I extends {
        params?: {
            enableFeeShare?: boolean | undefined;
            developerShares?: string | undefined;
            allowedDenoms?: string[] | undefined;
        } | undefined;
        feeShare?: {
            contractAddress?: string | undefined;
            deployerAddress?: string | undefined;
            withdrawerAddress?: string | undefined;
        }[] | undefined;
    } & {
        params?: ({
            enableFeeShare?: boolean | undefined;
            developerShares?: string | undefined;
            allowedDenoms?: string[] | undefined;
        } & {
            enableFeeShare?: boolean | undefined;
            developerShares?: string | undefined;
            allowedDenoms?: (string[] & string[] & { [K in Exclude<keyof I["params"]["allowedDenoms"], keyof string[]>]: never; }) | undefined;
        } & { [K_1 in Exclude<keyof I["params"], keyof ModuleParams>]: never; }) | undefined;
        feeShare?: ({
            contractAddress?: string | undefined;
            deployerAddress?: string | undefined;
            withdrawerAddress?: string | undefined;
        }[] & ({
            contractAddress?: string | undefined;
            deployerAddress?: string | undefined;
            withdrawerAddress?: string | undefined;
        } & {
            contractAddress?: string | undefined;
            deployerAddress?: string | undefined;
            withdrawerAddress?: string | undefined;
        } & { [K_2 in Exclude<keyof I["feeShare"][number], keyof FeeShare>]: never; })[] & { [K_3 in Exclude<keyof I["feeShare"], keyof {
            contractAddress?: string | undefined;
            deployerAddress?: string | undefined;
            withdrawerAddress?: string | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_4 in Exclude<keyof I, keyof GenesisState>]: never; }>(base?: I | undefined): GenesisState;
    fromPartial<I_1 extends {
        params?: {
            enableFeeShare?: boolean | undefined;
            developerShares?: string | undefined;
            allowedDenoms?: string[] | undefined;
        } | undefined;
        feeShare?: {
            contractAddress?: string | undefined;
            deployerAddress?: string | undefined;
            withdrawerAddress?: string | undefined;
        }[] | undefined;
    } & {
        params?: ({
            enableFeeShare?: boolean | undefined;
            developerShares?: string | undefined;
            allowedDenoms?: string[] | undefined;
        } & {
            enableFeeShare?: boolean | undefined;
            developerShares?: string | undefined;
            allowedDenoms?: (string[] & string[] & { [K_5 in Exclude<keyof I_1["params"]["allowedDenoms"], keyof string[]>]: never; }) | undefined;
        } & { [K_6 in Exclude<keyof I_1["params"], keyof ModuleParams>]: never; }) | undefined;
        feeShare?: ({
            contractAddress?: string | undefined;
            deployerAddress?: string | undefined;
            withdrawerAddress?: string | undefined;
        }[] & ({
            contractAddress?: string | undefined;
            deployerAddress?: string | undefined;
            withdrawerAddress?: string | undefined;
        } & {
            contractAddress?: string | undefined;
            deployerAddress?: string | undefined;
            withdrawerAddress?: string | undefined;
        } & { [K_7 in Exclude<keyof I_1["feeShare"][number], keyof FeeShare>]: never; })[] & { [K_8 in Exclude<keyof I_1["feeShare"], keyof {
            contractAddress?: string | undefined;
            deployerAddress?: string | undefined;
            withdrawerAddress?: string | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_9 in Exclude<keyof I_1, keyof GenesisState>]: never; }>(object: I_1): GenesisState;
};
export declare const ModuleParams: {
    encode(message: ModuleParams, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ModuleParams;
    fromJSON(object: any): ModuleParams;
    toJSON(message: ModuleParams): unknown;
    create<I extends {
        enableFeeShare?: boolean | undefined;
        developerShares?: string | undefined;
        allowedDenoms?: string[] | undefined;
    } & {
        enableFeeShare?: boolean | undefined;
        developerShares?: string | undefined;
        allowedDenoms?: (string[] & string[] & { [K in Exclude<keyof I["allowedDenoms"], keyof string[]>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, keyof ModuleParams>]: never; }>(base?: I | undefined): ModuleParams;
    fromPartial<I_1 extends {
        enableFeeShare?: boolean | undefined;
        developerShares?: string | undefined;
        allowedDenoms?: string[] | undefined;
    } & {
        enableFeeShare?: boolean | undefined;
        developerShares?: string | undefined;
        allowedDenoms?: (string[] & string[] & { [K_2 in Exclude<keyof I_1["allowedDenoms"], keyof string[]>]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I_1, keyof ModuleParams>]: never; }>(object: I_1): ModuleParams;
};
//# sourceMappingURL=genesis.d.ts.map