"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryClientImpl = exports.QueryServiceName = exports.QueryFeeSharesByWithdrawerResponse = exports.QueryFeeSharesByWithdrawerRequest = exports.QueryParamsResponse = exports.QueryParamsRequest = exports.QueryFeeShareResponse = exports.QueryFeeShareRequest = exports.QueryFeeSharesResponse = exports.QueryFeeSharesRequest = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const devgas_1 = require("./devgas");
const genesis_1 = require("./genesis");
function createBaseQueryFeeSharesRequest() {
    return { deployer: "" };
}
exports.QueryFeeSharesRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.deployer !== "") {
            writer.uint32(10).string(message.deployer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryFeeSharesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.deployer = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { deployer: isSet(object.deployer) ? String(object.deployer) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.deployer !== undefined && (obj.deployer = message.deployer);
        return obj;
    },
    create(base) {
        return exports.QueryFeeSharesRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryFeeSharesRequest();
        message.deployer = (_a = object.deployer) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryFeeSharesResponse() {
    return { feeshare: [] };
}
exports.QueryFeeSharesResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.feeshare) {
            devgas_1.FeeShare.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryFeeSharesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.feeshare.push(devgas_1.FeeShare.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { feeshare: Array.isArray(object === null || object === void 0 ? void 0 : object.feeshare) ? object.feeshare.map((e) => devgas_1.FeeShare.fromJSON(e)) : [] };
    },
    toJSON(message) {
        const obj = {};
        if (message.feeshare) {
            obj.feeshare = message.feeshare.map((e) => e ? devgas_1.FeeShare.toJSON(e) : undefined);
        }
        else {
            obj.feeshare = [];
        }
        return obj;
    },
    create(base) {
        return exports.QueryFeeSharesResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryFeeSharesResponse();
        message.feeshare = ((_a = object.feeshare) === null || _a === void 0 ? void 0 : _a.map((e) => devgas_1.FeeShare.fromPartial(e))) || [];
        return message;
    },
};
function createBaseQueryFeeShareRequest() {
    return { contractAddress: "" };
}
exports.QueryFeeShareRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.contractAddress !== "") {
            writer.uint32(10).string(message.contractAddress);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryFeeShareRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.contractAddress = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { contractAddress: isSet(object.contractAddress) ? String(object.contractAddress) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.contractAddress !== undefined && (obj.contractAddress = message.contractAddress);
        return obj;
    },
    create(base) {
        return exports.QueryFeeShareRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryFeeShareRequest();
        message.contractAddress = (_a = object.contractAddress) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryFeeShareResponse() {
    return { feeshare: undefined };
}
exports.QueryFeeShareResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.feeshare !== undefined) {
            devgas_1.FeeShare.encode(message.feeshare, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryFeeShareResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.feeshare = devgas_1.FeeShare.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { feeshare: isSet(object.feeshare) ? devgas_1.FeeShare.fromJSON(object.feeshare) : undefined };
    },
    toJSON(message) {
        const obj = {};
        message.feeshare !== undefined && (obj.feeshare = message.feeshare ? devgas_1.FeeShare.toJSON(message.feeshare) : undefined);
        return obj;
    },
    create(base) {
        return exports.QueryFeeShareResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryFeeShareResponse();
        message.feeshare = (object.feeshare !== undefined && object.feeshare !== null)
            ? devgas_1.FeeShare.fromPartial(object.feeshare)
            : undefined;
        return message;
    },
};
function createBaseQueryParamsRequest() {
    return {};
}
exports.QueryParamsRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.QueryParamsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseQueryParamsRequest();
        return message;
    },
};
function createBaseQueryParamsResponse() {
    return { params: undefined };
}
exports.QueryParamsResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.params !== undefined) {
            genesis_1.ModuleParams.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.params = genesis_1.ModuleParams.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { params: isSet(object.params) ? genesis_1.ModuleParams.fromJSON(object.params) : undefined };
    },
    toJSON(message) {
        const obj = {};
        message.params !== undefined && (obj.params = message.params ? genesis_1.ModuleParams.toJSON(message.params) : undefined);
        return obj;
    },
    create(base) {
        return exports.QueryParamsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryParamsResponse();
        message.params = (object.params !== undefined && object.params !== null)
            ? genesis_1.ModuleParams.fromPartial(object.params)
            : undefined;
        return message;
    },
};
function createBaseQueryFeeSharesByWithdrawerRequest() {
    return { withdrawerAddress: "" };
}
exports.QueryFeeSharesByWithdrawerRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.withdrawerAddress !== "") {
            writer.uint32(10).string(message.withdrawerAddress);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryFeeSharesByWithdrawerRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.withdrawerAddress = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { withdrawerAddress: isSet(object.withdrawerAddress) ? String(object.withdrawerAddress) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.withdrawerAddress !== undefined && (obj.withdrawerAddress = message.withdrawerAddress);
        return obj;
    },
    create(base) {
        return exports.QueryFeeSharesByWithdrawerRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryFeeSharesByWithdrawerRequest();
        message.withdrawerAddress = (_a = object.withdrawerAddress) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryFeeSharesByWithdrawerResponse() {
    return { feeshare: [] };
}
exports.QueryFeeSharesByWithdrawerResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.feeshare) {
            devgas_1.FeeShare.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryFeeSharesByWithdrawerResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.feeshare.push(devgas_1.FeeShare.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { feeshare: Array.isArray(object === null || object === void 0 ? void 0 : object.feeshare) ? object.feeshare.map((e) => devgas_1.FeeShare.fromJSON(e)) : [] };
    },
    toJSON(message) {
        const obj = {};
        if (message.feeshare) {
            obj.feeshare = message.feeshare.map((e) => e ? devgas_1.FeeShare.toJSON(e) : undefined);
        }
        else {
            obj.feeshare = [];
        }
        return obj;
    },
    create(base) {
        return exports.QueryFeeSharesByWithdrawerResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryFeeSharesByWithdrawerResponse();
        message.feeshare = ((_a = object.feeshare) === null || _a === void 0 ? void 0 : _a.map((e) => devgas_1.FeeShare.fromPartial(e))) || [];
        return message;
    },
};
exports.QueryServiceName = "nibiru.devgas.v1.Query";
class QueryClientImpl {
    constructor(rpc, opts) {
        this.service = (opts === null || opts === void 0 ? void 0 : opts.service) || exports.QueryServiceName;
        this.rpc = rpc;
        this.FeeShares = this.FeeShares.bind(this);
        this.FeeShare = this.FeeShare.bind(this);
        this.Params = this.Params.bind(this);
        this.FeeSharesByWithdrawer = this.FeeSharesByWithdrawer.bind(this);
    }
    FeeShares(request) {
        const data = exports.QueryFeeSharesRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "FeeShares", data);
        return promise.then((data) => exports.QueryFeeSharesResponse.decode(minimal_1.default.Reader.create(data)));
    }
    FeeShare(request) {
        const data = exports.QueryFeeShareRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "FeeShare", data);
        return promise.then((data) => exports.QueryFeeShareResponse.decode(minimal_1.default.Reader.create(data)));
    }
    Params(request) {
        const data = exports.QueryParamsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Params", data);
        return promise.then((data) => exports.QueryParamsResponse.decode(minimal_1.default.Reader.create(data)));
    }
    FeeSharesByWithdrawer(request) {
        const data = exports.QueryFeeSharesByWithdrawerRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "FeeSharesByWithdrawer", data);
        return promise.then((data) => exports.QueryFeeSharesByWithdrawerResponse.decode(minimal_1.default.Reader.create(data)));
    }
}
exports.QueryClientImpl = QueryClientImpl;
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=query.js.map