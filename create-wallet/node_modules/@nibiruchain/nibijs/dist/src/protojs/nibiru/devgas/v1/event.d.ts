import _m0 from "protobufjs/minimal";
/**
 * ABCI event emitted when a deployer registers a contract to receive fee
 * sharing payouts, specifying the deployer, contract, and withdrawer addresses.
 */
export interface EventRegisterDevGas {
    /**
     * deployer is the addess of the account that registered the smart contract to
     * receive dev gas royalties.
     */
    deployer: string;
    /**
     * Address of the smart contract. This identifies the specific contract
     * that will receive fee sharing payouts.
     */
    contract: string;
    /**
     * The address that will receive the fee sharing payouts for the registered
     * contract. This could be the deployer address or a separate withdrawer
     * address specified.
     */
    withdrawer: string;
}
/**
 * ABCI event emitted when a deployer cancels fee sharing for a contract,
 * specifying the deployer and contract addresses.
 */
export interface EventCancelDevGas {
    /**
     * deployer is the addess of the account that registered the smart contract to
     * receive dev gas royalties.
     */
    deployer: string;
    /**
     * Address of the smart contract. This identifies the specific contract
     * that will receive fee sharing payouts.
     */
    contract: string;
}
/**
 * ABCI event emitted when a deployer updates the fee sharing registration for a
 * contract, specifying updated deployer, contract, and/or withdrawer addresses.
 */
export interface EventUpdateDevGas {
    /**
     * deployer is the addess of the account that registered the smart contract to
     * receive dev gas royalties.
     */
    deployer: string;
    /**
     * Address of the smart contract. This identifies the specific contract
     * that will receive fee sharing payouts.
     */
    contract: string;
    /**
     * The address that will receive the fee sharing payouts for the registered
     * contract. This could be the deployer address or a separate withdrawer
     * address specified.
     */
    withdrawer: string;
}
/**
 * ABCI event emitted when fee sharing payouts are made, containing details on
 * the payouts in JSON format.
 */
export interface EventPayoutDevGas {
    payouts: string;
}
export declare const EventRegisterDevGas: {
    encode(message: EventRegisterDevGas, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventRegisterDevGas;
    fromJSON(object: any): EventRegisterDevGas;
    toJSON(message: EventRegisterDevGas): unknown;
    create<I extends {
        deployer?: string | undefined;
        contract?: string | undefined;
        withdrawer?: string | undefined;
    } & {
        deployer?: string | undefined;
        contract?: string | undefined;
        withdrawer?: string | undefined;
    } & { [K in Exclude<keyof I, keyof EventRegisterDevGas>]: never; }>(base?: I | undefined): EventRegisterDevGas;
    fromPartial<I_1 extends {
        deployer?: string | undefined;
        contract?: string | undefined;
        withdrawer?: string | undefined;
    } & {
        deployer?: string | undefined;
        contract?: string | undefined;
        withdrawer?: string | undefined;
    } & { [K_1 in Exclude<keyof I_1, keyof EventRegisterDevGas>]: never; }>(object: I_1): EventRegisterDevGas;
};
export declare const EventCancelDevGas: {
    encode(message: EventCancelDevGas, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventCancelDevGas;
    fromJSON(object: any): EventCancelDevGas;
    toJSON(message: EventCancelDevGas): unknown;
    create<I extends {
        deployer?: string | undefined;
        contract?: string | undefined;
    } & {
        deployer?: string | undefined;
        contract?: string | undefined;
    } & { [K in Exclude<keyof I, keyof EventCancelDevGas>]: never; }>(base?: I | undefined): EventCancelDevGas;
    fromPartial<I_1 extends {
        deployer?: string | undefined;
        contract?: string | undefined;
    } & {
        deployer?: string | undefined;
        contract?: string | undefined;
    } & { [K_1 in Exclude<keyof I_1, keyof EventCancelDevGas>]: never; }>(object: I_1): EventCancelDevGas;
};
export declare const EventUpdateDevGas: {
    encode(message: EventUpdateDevGas, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventUpdateDevGas;
    fromJSON(object: any): EventUpdateDevGas;
    toJSON(message: EventUpdateDevGas): unknown;
    create<I extends {
        deployer?: string | undefined;
        contract?: string | undefined;
        withdrawer?: string | undefined;
    } & {
        deployer?: string | undefined;
        contract?: string | undefined;
        withdrawer?: string | undefined;
    } & { [K in Exclude<keyof I, keyof EventUpdateDevGas>]: never; }>(base?: I | undefined): EventUpdateDevGas;
    fromPartial<I_1 extends {
        deployer?: string | undefined;
        contract?: string | undefined;
        withdrawer?: string | undefined;
    } & {
        deployer?: string | undefined;
        contract?: string | undefined;
        withdrawer?: string | undefined;
    } & { [K_1 in Exclude<keyof I_1, keyof EventUpdateDevGas>]: never; }>(object: I_1): EventUpdateDevGas;
};
export declare const EventPayoutDevGas: {
    encode(message: EventPayoutDevGas, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventPayoutDevGas;
    fromJSON(object: any): EventPayoutDevGas;
    toJSON(message: EventPayoutDevGas): unknown;
    create<I extends {
        payouts?: string | undefined;
    } & {
        payouts?: string | undefined;
    } & { [K in Exclude<keyof I, "payouts">]: never; }>(base?: I | undefined): EventPayoutDevGas;
    fromPartial<I_1 extends {
        payouts?: string | undefined;
    } & {
        payouts?: string | undefined;
    } & { [K_1 in Exclude<keyof I_1, "payouts">]: never; }>(object: I_1): EventPayoutDevGas;
};
//# sourceMappingURL=event.d.ts.map