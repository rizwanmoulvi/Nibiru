import Long from "long";
import _m0 from "protobufjs/minimal";
import { Metadata } from "../../../cosmos/bank/v1beta1/bank";
import { ModuleParams } from "./state";
/** QueryParamsRequest is the request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}
/** QueryParamsResponse is the response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
    /** Module parameters stored in state */
    params?: ModuleParams;
}
/** QueryDenomsRequest: gRPC query for all denoms registered for a creator */
export interface QueryDenomsRequest {
    creator: string;
}
/** QueryDenomsResponse: All registered denoms for a creator */
export interface QueryDenomsResponse {
    denoms: string[];
}
/** QueryDenomInfoRequest: gRPC query for the denom admin and x/bank metadata */
export interface QueryDenomInfoRequest {
    denom: string;
}
/** QueryDenomInfoResponse: All registered denoms for a creator */
export interface QueryDenomInfoResponse {
    /** Admin of the token factory denom */
    admin: string;
    /**
     * Metadata: Official x/bank metadata for the denom. All token factory denoms
     * are standard, native assets.
     */
    metadata?: Metadata;
}
export declare const QueryParamsRequest: {
    encode(_: QueryParamsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryParamsRequest;
    fromJSON(_: any): QueryParamsRequest;
    toJSON(_: QueryParamsRequest): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I | undefined): QueryParamsRequest;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): QueryParamsRequest;
};
export declare const QueryParamsResponse: {
    encode(message: QueryParamsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryParamsResponse;
    fromJSON(object: any): QueryParamsResponse;
    toJSON(message: QueryParamsResponse): unknown;
    create<I extends {
        params?: {
            denomCreationGasConsume?: string | number | Long | undefined;
        } | undefined;
    } & {
        params?: ({
            denomCreationGasConsume?: string | number | Long | undefined;
        } & {
            denomCreationGasConsume?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K in Exclude<keyof I["params"]["denomCreationGasConsume"], keyof Long>]: never; }) | undefined;
        } & { [K_1 in Exclude<keyof I["params"], "denomCreationGasConsume">]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, "params">]: never; }>(base?: I | undefined): QueryParamsResponse;
    fromPartial<I_1 extends {
        params?: {
            denomCreationGasConsume?: string | number | Long | undefined;
        } | undefined;
    } & {
        params?: ({
            denomCreationGasConsume?: string | number | Long | undefined;
        } & {
            denomCreationGasConsume?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_3 in Exclude<keyof I_1["params"]["denomCreationGasConsume"], keyof Long>]: never; }) | undefined;
        } & { [K_4 in Exclude<keyof I_1["params"], "denomCreationGasConsume">]: never; }) | undefined;
    } & { [K_5 in Exclude<keyof I_1, "params">]: never; }>(object: I_1): QueryParamsResponse;
};
export declare const QueryDenomsRequest: {
    encode(message: QueryDenomsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryDenomsRequest;
    fromJSON(object: any): QueryDenomsRequest;
    toJSON(message: QueryDenomsRequest): unknown;
    create<I extends {
        creator?: string | undefined;
    } & {
        creator?: string | undefined;
    } & { [K in Exclude<keyof I, "creator">]: never; }>(base?: I | undefined): QueryDenomsRequest;
    fromPartial<I_1 extends {
        creator?: string | undefined;
    } & {
        creator?: string | undefined;
    } & { [K_1 in Exclude<keyof I_1, "creator">]: never; }>(object: I_1): QueryDenomsRequest;
};
export declare const QueryDenomsResponse: {
    encode(message: QueryDenomsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryDenomsResponse;
    fromJSON(object: any): QueryDenomsResponse;
    toJSON(message: QueryDenomsResponse): unknown;
    create<I extends {
        denoms?: string[] | undefined;
    } & {
        denoms?: (string[] & string[] & { [K in Exclude<keyof I["denoms"], keyof string[]>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "denoms">]: never; }>(base?: I | undefined): QueryDenomsResponse;
    fromPartial<I_1 extends {
        denoms?: string[] | undefined;
    } & {
        denoms?: (string[] & string[] & { [K_2 in Exclude<keyof I_1["denoms"], keyof string[]>]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I_1, "denoms">]: never; }>(object: I_1): QueryDenomsResponse;
};
export declare const QueryDenomInfoRequest: {
    encode(message: QueryDenomInfoRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryDenomInfoRequest;
    fromJSON(object: any): QueryDenomInfoRequest;
    toJSON(message: QueryDenomInfoRequest): unknown;
    create<I extends {
        denom?: string | undefined;
    } & {
        denom?: string | undefined;
    } & { [K in Exclude<keyof I, "denom">]: never; }>(base?: I | undefined): QueryDenomInfoRequest;
    fromPartial<I_1 extends {
        denom?: string | undefined;
    } & {
        denom?: string | undefined;
    } & { [K_1 in Exclude<keyof I_1, "denom">]: never; }>(object: I_1): QueryDenomInfoRequest;
};
export declare const QueryDenomInfoResponse: {
    encode(message: QueryDenomInfoResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryDenomInfoResponse;
    fromJSON(object: any): QueryDenomInfoResponse;
    toJSON(message: QueryDenomInfoResponse): unknown;
    create<I extends {
        admin?: string | undefined;
        metadata?: {
            description?: string | undefined;
            denomUnits?: {
                denom?: string | undefined;
                exponent?: number | undefined;
                aliases?: string[] | undefined;
            }[] | undefined;
            base?: string | undefined;
            display?: string | undefined;
            name?: string | undefined;
            symbol?: string | undefined;
            uri?: string | undefined;
            uriHash?: string | undefined;
        } | undefined;
    } & {
        admin?: string | undefined;
        metadata?: ({
            description?: string | undefined;
            denomUnits?: {
                denom?: string | undefined;
                exponent?: number | undefined;
                aliases?: string[] | undefined;
            }[] | undefined;
            base?: string | undefined;
            display?: string | undefined;
            name?: string | undefined;
            symbol?: string | undefined;
            uri?: string | undefined;
            uriHash?: string | undefined;
        } & {
            description?: string | undefined;
            denomUnits?: ({
                denom?: string | undefined;
                exponent?: number | undefined;
                aliases?: string[] | undefined;
            }[] & ({
                denom?: string | undefined;
                exponent?: number | undefined;
                aliases?: string[] | undefined;
            } & {
                denom?: string | undefined;
                exponent?: number | undefined;
                aliases?: (string[] & string[] & { [K in Exclude<keyof I["metadata"]["denomUnits"][number]["aliases"], keyof string[]>]: never; }) | undefined;
            } & { [K_1 in Exclude<keyof I["metadata"]["denomUnits"][number], keyof import("../../../cosmos/bank/v1beta1/bank").DenomUnit>]: never; })[] & { [K_2 in Exclude<keyof I["metadata"]["denomUnits"], keyof {
                denom?: string | undefined;
                exponent?: number | undefined;
                aliases?: string[] | undefined;
            }[]>]: never; }) | undefined;
            base?: string | undefined;
            display?: string | undefined;
            name?: string | undefined;
            symbol?: string | undefined;
            uri?: string | undefined;
            uriHash?: string | undefined;
        } & { [K_3 in Exclude<keyof I["metadata"], keyof Metadata>]: never; }) | undefined;
    } & { [K_4 in Exclude<keyof I, keyof QueryDenomInfoResponse>]: never; }>(base?: I | undefined): QueryDenomInfoResponse;
    fromPartial<I_1 extends {
        admin?: string | undefined;
        metadata?: {
            description?: string | undefined;
            denomUnits?: {
                denom?: string | undefined;
                exponent?: number | undefined;
                aliases?: string[] | undefined;
            }[] | undefined;
            base?: string | undefined;
            display?: string | undefined;
            name?: string | undefined;
            symbol?: string | undefined;
            uri?: string | undefined;
            uriHash?: string | undefined;
        } | undefined;
    } & {
        admin?: string | undefined;
        metadata?: ({
            description?: string | undefined;
            denomUnits?: {
                denom?: string | undefined;
                exponent?: number | undefined;
                aliases?: string[] | undefined;
            }[] | undefined;
            base?: string | undefined;
            display?: string | undefined;
            name?: string | undefined;
            symbol?: string | undefined;
            uri?: string | undefined;
            uriHash?: string | undefined;
        } & {
            description?: string | undefined;
            denomUnits?: ({
                denom?: string | undefined;
                exponent?: number | undefined;
                aliases?: string[] | undefined;
            }[] & ({
                denom?: string | undefined;
                exponent?: number | undefined;
                aliases?: string[] | undefined;
            } & {
                denom?: string | undefined;
                exponent?: number | undefined;
                aliases?: (string[] & string[] & { [K_5 in Exclude<keyof I_1["metadata"]["denomUnits"][number]["aliases"], keyof string[]>]: never; }) | undefined;
            } & { [K_6 in Exclude<keyof I_1["metadata"]["denomUnits"][number], keyof import("../../../cosmos/bank/v1beta1/bank").DenomUnit>]: never; })[] & { [K_7 in Exclude<keyof I_1["metadata"]["denomUnits"], keyof {
                denom?: string | undefined;
                exponent?: number | undefined;
                aliases?: string[] | undefined;
            }[]>]: never; }) | undefined;
            base?: string | undefined;
            display?: string | undefined;
            name?: string | undefined;
            symbol?: string | undefined;
            uri?: string | undefined;
            uriHash?: string | undefined;
        } & { [K_8 in Exclude<keyof I_1["metadata"], keyof Metadata>]: never; }) | undefined;
    } & { [K_9 in Exclude<keyof I_1, keyof QueryDenomInfoResponse>]: never; }>(object: I_1): QueryDenomInfoResponse;
};
/** Query defines the gRPC querier service. */
export interface Query {
    /** Params retrieves the module params */
    Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
    /** Denoms retrieves all registered denoms for a given creator */
    Denoms(request: QueryDenomsRequest): Promise<QueryDenomsResponse>;
    /** DenomInfo retrieves the denom metadata and admin info */
    DenomInfo(request: QueryDenomInfoRequest): Promise<QueryDenomInfoResponse>;
}
export declare const QueryServiceName = "nibiru.tokenfactory.v1.Query";
export declare class QueryClientImpl implements Query {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
    Denoms(request: QueryDenomsRequest): Promise<QueryDenomsResponse>;
    DenomInfo(request: QueryDenomInfoRequest): Promise<QueryDenomInfoResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=query.d.ts.map