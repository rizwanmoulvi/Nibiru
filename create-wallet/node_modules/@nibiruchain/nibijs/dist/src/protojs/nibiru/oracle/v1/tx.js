"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgClientImpl = exports.MsgServiceName = exports.MsgEditOracleParamsResponse = exports.MsgEditOracleParams = exports.MsgDelegateFeedConsentResponse = exports.MsgDelegateFeedConsent = exports.MsgAggregateExchangeRateVoteResponse = exports.MsgAggregateExchangeRateVote = exports.MsgAggregateExchangeRatePrevoteResponse = exports.MsgAggregateExchangeRatePrevote = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const oracle_1 = require("./oracle");
function createBaseMsgAggregateExchangeRatePrevote() {
    return { hash: "", feeder: "", validator: "" };
}
exports.MsgAggregateExchangeRatePrevote = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.hash !== "") {
            writer.uint32(10).string(message.hash);
        }
        if (message.feeder !== "") {
            writer.uint32(18).string(message.feeder);
        }
        if (message.validator !== "") {
            writer.uint32(26).string(message.validator);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgAggregateExchangeRatePrevote();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.hash = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.feeder = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.validator = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            hash: isSet(object.hash) ? String(object.hash) : "",
            feeder: isSet(object.feeder) ? String(object.feeder) : "",
            validator: isSet(object.validator) ? String(object.validator) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.hash !== undefined && (obj.hash = message.hash);
        message.feeder !== undefined && (obj.feeder = message.feeder);
        message.validator !== undefined && (obj.validator = message.validator);
        return obj;
    },
    create(base) {
        return exports.MsgAggregateExchangeRatePrevote.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseMsgAggregateExchangeRatePrevote();
        message.hash = (_a = object.hash) !== null && _a !== void 0 ? _a : "";
        message.feeder = (_b = object.feeder) !== null && _b !== void 0 ? _b : "";
        message.validator = (_c = object.validator) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseMsgAggregateExchangeRatePrevoteResponse() {
    return {};
}
exports.MsgAggregateExchangeRatePrevoteResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgAggregateExchangeRatePrevoteResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgAggregateExchangeRatePrevoteResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMsgAggregateExchangeRatePrevoteResponse();
        return message;
    },
};
function createBaseMsgAggregateExchangeRateVote() {
    return { salt: "", exchangeRates: "", feeder: "", validator: "" };
}
exports.MsgAggregateExchangeRateVote = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.salt !== "") {
            writer.uint32(10).string(message.salt);
        }
        if (message.exchangeRates !== "") {
            writer.uint32(18).string(message.exchangeRates);
        }
        if (message.feeder !== "") {
            writer.uint32(26).string(message.feeder);
        }
        if (message.validator !== "") {
            writer.uint32(34).string(message.validator);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgAggregateExchangeRateVote();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.salt = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.exchangeRates = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.feeder = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.validator = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            salt: isSet(object.salt) ? String(object.salt) : "",
            exchangeRates: isSet(object.exchangeRates) ? String(object.exchangeRates) : "",
            feeder: isSet(object.feeder) ? String(object.feeder) : "",
            validator: isSet(object.validator) ? String(object.validator) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.salt !== undefined && (obj.salt = message.salt);
        message.exchangeRates !== undefined && (obj.exchangeRates = message.exchangeRates);
        message.feeder !== undefined && (obj.feeder = message.feeder);
        message.validator !== undefined && (obj.validator = message.validator);
        return obj;
    },
    create(base) {
        return exports.MsgAggregateExchangeRateVote.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseMsgAggregateExchangeRateVote();
        message.salt = (_a = object.salt) !== null && _a !== void 0 ? _a : "";
        message.exchangeRates = (_b = object.exchangeRates) !== null && _b !== void 0 ? _b : "";
        message.feeder = (_c = object.feeder) !== null && _c !== void 0 ? _c : "";
        message.validator = (_d = object.validator) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseMsgAggregateExchangeRateVoteResponse() {
    return {};
}
exports.MsgAggregateExchangeRateVoteResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgAggregateExchangeRateVoteResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgAggregateExchangeRateVoteResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMsgAggregateExchangeRateVoteResponse();
        return message;
    },
};
function createBaseMsgDelegateFeedConsent() {
    return { operator: "", delegate: "" };
}
exports.MsgDelegateFeedConsent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.operator !== "") {
            writer.uint32(10).string(message.operator);
        }
        if (message.delegate !== "") {
            writer.uint32(18).string(message.delegate);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgDelegateFeedConsent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.operator = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.delegate = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            operator: isSet(object.operator) ? String(object.operator) : "",
            delegate: isSet(object.delegate) ? String(object.delegate) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.operator !== undefined && (obj.operator = message.operator);
        message.delegate !== undefined && (obj.delegate = message.delegate);
        return obj;
    },
    create(base) {
        return exports.MsgDelegateFeedConsent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseMsgDelegateFeedConsent();
        message.operator = (_a = object.operator) !== null && _a !== void 0 ? _a : "";
        message.delegate = (_b = object.delegate) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseMsgDelegateFeedConsentResponse() {
    return {};
}
exports.MsgDelegateFeedConsentResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgDelegateFeedConsentResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgDelegateFeedConsentResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMsgDelegateFeedConsentResponse();
        return message;
    },
};
function createBaseMsgEditOracleParams() {
    return {
        sender: "",
        votePeriod: "",
        voteThreshold: "",
        rewardBand: "",
        whitelist: [],
        slashFraction: "",
        slashWindow: "",
        minValidPerWindow: "",
        twapLookbackWindow: "",
        minVoters: "",
        validatorFeeRatio: "",
    };
}
exports.MsgEditOracleParams = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.votePeriod !== "") {
            writer.uint32(18).string(message.votePeriod);
        }
        if (message.voteThreshold !== "") {
            writer.uint32(26).string(message.voteThreshold);
        }
        if (message.rewardBand !== "") {
            writer.uint32(34).string(message.rewardBand);
        }
        for (const v of message.whitelist) {
            writer.uint32(42).string(v);
        }
        if (message.slashFraction !== "") {
            writer.uint32(50).string(message.slashFraction);
        }
        if (message.slashWindow !== "") {
            writer.uint32(58).string(message.slashWindow);
        }
        if (message.minValidPerWindow !== "") {
            writer.uint32(66).string(message.minValidPerWindow);
        }
        if (message.twapLookbackWindow !== "") {
            writer.uint32(74).string(message.twapLookbackWindow);
        }
        if (message.minVoters !== "") {
            writer.uint32(82).string(message.minVoters);
        }
        if (message.validatorFeeRatio !== "") {
            writer.uint32(90).string(message.validatorFeeRatio);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgEditOracleParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.votePeriod = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.voteThreshold = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.rewardBand = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.whitelist.push(reader.string());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.slashFraction = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.slashWindow = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.minValidPerWindow = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.twapLookbackWindow = reader.string();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.minVoters = reader.string();
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.validatorFeeRatio = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? String(object.sender) : "",
            votePeriod: isSet(object.votePeriod) ? String(object.votePeriod) : "",
            voteThreshold: isSet(object.voteThreshold) ? String(object.voteThreshold) : "",
            rewardBand: isSet(object.rewardBand) ? String(object.rewardBand) : "",
            whitelist: Array.isArray(object === null || object === void 0 ? void 0 : object.whitelist) ? object.whitelist.map((e) => String(e)) : [],
            slashFraction: isSet(object.slashFraction) ? String(object.slashFraction) : "",
            slashWindow: isSet(object.slashWindow) ? String(object.slashWindow) : "",
            minValidPerWindow: isSet(object.minValidPerWindow) ? String(object.minValidPerWindow) : "",
            twapLookbackWindow: isSet(object.twapLookbackWindow) ? String(object.twapLookbackWindow) : "",
            minVoters: isSet(object.minVoters) ? String(object.minVoters) : "",
            validatorFeeRatio: isSet(object.validatorFeeRatio) ? String(object.validatorFeeRatio) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.sender !== undefined && (obj.sender = message.sender);
        message.votePeriod !== undefined && (obj.votePeriod = message.votePeriod);
        message.voteThreshold !== undefined && (obj.voteThreshold = message.voteThreshold);
        message.rewardBand !== undefined && (obj.rewardBand = message.rewardBand);
        if (message.whitelist) {
            obj.whitelist = message.whitelist.map((e) => e);
        }
        else {
            obj.whitelist = [];
        }
        message.slashFraction !== undefined && (obj.slashFraction = message.slashFraction);
        message.slashWindow !== undefined && (obj.slashWindow = message.slashWindow);
        message.minValidPerWindow !== undefined && (obj.minValidPerWindow = message.minValidPerWindow);
        message.twapLookbackWindow !== undefined && (obj.twapLookbackWindow = message.twapLookbackWindow);
        message.minVoters !== undefined && (obj.minVoters = message.minVoters);
        message.validatorFeeRatio !== undefined && (obj.validatorFeeRatio = message.validatorFeeRatio);
        return obj;
    },
    create(base) {
        return exports.MsgEditOracleParams.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        const message = createBaseMsgEditOracleParams();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.votePeriod = (_b = object.votePeriod) !== null && _b !== void 0 ? _b : "";
        message.voteThreshold = (_c = object.voteThreshold) !== null && _c !== void 0 ? _c : "";
        message.rewardBand = (_d = object.rewardBand) !== null && _d !== void 0 ? _d : "";
        message.whitelist = ((_e = object.whitelist) === null || _e === void 0 ? void 0 : _e.map((e) => e)) || [];
        message.slashFraction = (_f = object.slashFraction) !== null && _f !== void 0 ? _f : "";
        message.slashWindow = (_g = object.slashWindow) !== null && _g !== void 0 ? _g : "";
        message.minValidPerWindow = (_h = object.minValidPerWindow) !== null && _h !== void 0 ? _h : "";
        message.twapLookbackWindow = (_j = object.twapLookbackWindow) !== null && _j !== void 0 ? _j : "";
        message.minVoters = (_k = object.minVoters) !== null && _k !== void 0 ? _k : "";
        message.validatorFeeRatio = (_l = object.validatorFeeRatio) !== null && _l !== void 0 ? _l : "";
        return message;
    },
};
function createBaseMsgEditOracleParamsResponse() {
    return { newParams: undefined };
}
exports.MsgEditOracleParamsResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.newParams !== undefined) {
            oracle_1.Params.encode(message.newParams, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgEditOracleParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.newParams = oracle_1.Params.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { newParams: isSet(object.newParams) ? oracle_1.Params.fromJSON(object.newParams) : undefined };
    },
    toJSON(message) {
        const obj = {};
        message.newParams !== undefined &&
            (obj.newParams = message.newParams ? oracle_1.Params.toJSON(message.newParams) : undefined);
        return obj;
    },
    create(base) {
        return exports.MsgEditOracleParamsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseMsgEditOracleParamsResponse();
        message.newParams = (object.newParams !== undefined && object.newParams !== null)
            ? oracle_1.Params.fromPartial(object.newParams)
            : undefined;
        return message;
    },
};
exports.MsgServiceName = "nibiru.oracle.v1.Msg";
class MsgClientImpl {
    constructor(rpc, opts) {
        this.service = (opts === null || opts === void 0 ? void 0 : opts.service) || exports.MsgServiceName;
        this.rpc = rpc;
        this.AggregateExchangeRatePrevote = this.AggregateExchangeRatePrevote.bind(this);
        this.AggregateExchangeRateVote = this.AggregateExchangeRateVote.bind(this);
        this.DelegateFeedConsent = this.DelegateFeedConsent.bind(this);
        this.EditOracleParams = this.EditOracleParams.bind(this);
    }
    AggregateExchangeRatePrevote(request) {
        const data = exports.MsgAggregateExchangeRatePrevote.encode(request).finish();
        const promise = this.rpc.request(this.service, "AggregateExchangeRatePrevote", data);
        return promise.then((data) => exports.MsgAggregateExchangeRatePrevoteResponse.decode(minimal_1.default.Reader.create(data)));
    }
    AggregateExchangeRateVote(request) {
        const data = exports.MsgAggregateExchangeRateVote.encode(request).finish();
        const promise = this.rpc.request(this.service, "AggregateExchangeRateVote", data);
        return promise.then((data) => exports.MsgAggregateExchangeRateVoteResponse.decode(minimal_1.default.Reader.create(data)));
    }
    DelegateFeedConsent(request) {
        const data = exports.MsgDelegateFeedConsent.encode(request).finish();
        const promise = this.rpc.request(this.service, "DelegateFeedConsent", data);
        return promise.then((data) => exports.MsgDelegateFeedConsentResponse.decode(minimal_1.default.Reader.create(data)));
    }
    EditOracleParams(request) {
        const data = exports.MsgEditOracleParams.encode(request).finish();
        const promise = this.rpc.request(this.service, "EditOracleParams", data);
        return promise.then((data) => exports.MsgEditOracleParamsResponse.decode(minimal_1.default.Reader.create(data)));
    }
}
exports.MsgClientImpl = MsgClientImpl;
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=tx.js.map