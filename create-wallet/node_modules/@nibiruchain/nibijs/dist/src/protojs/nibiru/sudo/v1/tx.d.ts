import _m0 from "protobufjs/minimal";
/** MsgEditSudoers: Msg to update the "Sudoers" state. */
export interface MsgEditSudoers {
    /**
     * Action: identifier for the type of edit that will take place. Using this
     *   action field prevents us from needing to create several similar message
     *   types.
     */
    action: string;
    /** Contracts: An input payload. */
    contracts: string[];
    /** Sender: Address for the signer of the transaction. */
    sender: string;
}
/** MsgEditSudoersResponse indicates the successful execution of MsgEditSudeors. */
export interface MsgEditSudoersResponse {
}
/** MsgChangeRoot: Msg to update the "Sudoers" state. */
export interface MsgChangeRoot {
    /** Sender: Address for the signer of the transaction. */
    sender: string;
    /** NewRoot: New root address. */
    newRoot: string;
}
/** MsgChangeRootResponse indicates the successful execution of MsgChangeRoot. */
export interface MsgChangeRootResponse {
}
export declare const MsgEditSudoers: {
    encode(message: MsgEditSudoers, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgEditSudoers;
    fromJSON(object: any): MsgEditSudoers;
    toJSON(message: MsgEditSudoers): unknown;
    create<I extends {
        action?: string | undefined;
        contracts?: string[] | undefined;
        sender?: string | undefined;
    } & {
        action?: string | undefined;
        contracts?: (string[] & string[] & { [K in Exclude<keyof I["contracts"], keyof string[]>]: never; }) | undefined;
        sender?: string | undefined;
    } & { [K_1 in Exclude<keyof I, keyof MsgEditSudoers>]: never; }>(base?: I | undefined): MsgEditSudoers;
    fromPartial<I_1 extends {
        action?: string | undefined;
        contracts?: string[] | undefined;
        sender?: string | undefined;
    } & {
        action?: string | undefined;
        contracts?: (string[] & string[] & { [K_2 in Exclude<keyof I_1["contracts"], keyof string[]>]: never; }) | undefined;
        sender?: string | undefined;
    } & { [K_3 in Exclude<keyof I_1, keyof MsgEditSudoers>]: never; }>(object: I_1): MsgEditSudoers;
};
export declare const MsgEditSudoersResponse: {
    encode(_: MsgEditSudoersResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgEditSudoersResponse;
    fromJSON(_: any): MsgEditSudoersResponse;
    toJSON(_: MsgEditSudoersResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I | undefined): MsgEditSudoersResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): MsgEditSudoersResponse;
};
export declare const MsgChangeRoot: {
    encode(message: MsgChangeRoot, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgChangeRoot;
    fromJSON(object: any): MsgChangeRoot;
    toJSON(message: MsgChangeRoot): unknown;
    create<I extends {
        sender?: string | undefined;
        newRoot?: string | undefined;
    } & {
        sender?: string | undefined;
        newRoot?: string | undefined;
    } & { [K in Exclude<keyof I, keyof MsgChangeRoot>]: never; }>(base?: I | undefined): MsgChangeRoot;
    fromPartial<I_1 extends {
        sender?: string | undefined;
        newRoot?: string | undefined;
    } & {
        sender?: string | undefined;
        newRoot?: string | undefined;
    } & { [K_1 in Exclude<keyof I_1, keyof MsgChangeRoot>]: never; }>(object: I_1): MsgChangeRoot;
};
export declare const MsgChangeRootResponse: {
    encode(_: MsgChangeRootResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgChangeRootResponse;
    fromJSON(_: any): MsgChangeRootResponse;
    toJSON(_: MsgChangeRootResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I | undefined): MsgChangeRootResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): MsgChangeRootResponse;
};
/**
 * Msg defines the x/sudo module's Msg service. Protobuf `Msg` services are
 * called from `BaseApp` instances during `DeliverTx`. The `Msg` service will be
 * responsible for processing `sdk.Msg` requests.
 */
export interface Msg {
    /** EditSudoers updates the "Sudoers" state */
    EditSudoers(request: MsgEditSudoers): Promise<MsgEditSudoersResponse>;
    ChangeRoot(request: MsgChangeRoot): Promise<MsgChangeRootResponse>;
}
export declare const MsgServiceName = "nibiru.sudo.v1.Msg";
export declare class MsgClientImpl implements Msg {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    EditSudoers(request: MsgEditSudoers): Promise<MsgEditSudoersResponse>;
    ChangeRoot(request: MsgChangeRoot): Promise<MsgChangeRootResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=tx.d.ts.map