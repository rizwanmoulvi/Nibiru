import _m0 from "protobufjs/minimal";
import { FeeShare } from "./devgas";
import { ModuleParams } from "./genesis";
/** QueryFeeSharesRequest is the request type for the Query/FeeShares RPC method. */
export interface QueryFeeSharesRequest {
    /**
     * TODO feat(devgas): re-implement the paginated version
     * TODO feat(colletions): add automatic pagination generation
     */
    deployer: string;
}
/**
 * QueryFeeSharesResponse is the response type for the Query/FeeShares RPC
 * method.
 */
export interface QueryFeeSharesResponse {
    /** FeeShare is the slice of all stored Reveneue for the deployer */
    feeshare: FeeShare[];
}
/** QueryFeeShareRequest is the request type for the Query/FeeShare RPC method. */
export interface QueryFeeShareRequest {
    /** contract_address of a registered contract in bech32 format */
    contractAddress: string;
}
/** QueryFeeShareResponse is the response type for the Query/FeeShare RPC method. */
export interface QueryFeeShareResponse {
    /** FeeShare is a stored Reveneue for the queried contract */
    feeshare?: FeeShare;
}
/** QueryParamsRequest is the request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}
/** QueryParamsResponse is the response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
    /** params is the returned FeeShare parameter */
    params?: ModuleParams;
}
/**
 * QueryFeeSharesByWithdrawerRequest is the request type for the
 * Query/FeeSharesByWithdrawer RPC method.
 */
export interface QueryFeeSharesByWithdrawerRequest {
    /** withdrawer_address in bech32 format */
    withdrawerAddress: string;
}
/**
 * QueryFeeSharesByWithdrawerResponse is the response type for the
 * Query/FeeSharesByWithdrawer RPC method.
 */
export interface QueryFeeSharesByWithdrawerResponse {
    feeshare: FeeShare[];
}
export declare const QueryFeeSharesRequest: {
    encode(message: QueryFeeSharesRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryFeeSharesRequest;
    fromJSON(object: any): QueryFeeSharesRequest;
    toJSON(message: QueryFeeSharesRequest): unknown;
    create<I extends {
        deployer?: string | undefined;
    } & {
        deployer?: string | undefined;
    } & { [K in Exclude<keyof I, "deployer">]: never; }>(base?: I | undefined): QueryFeeSharesRequest;
    fromPartial<I_1 extends {
        deployer?: string | undefined;
    } & {
        deployer?: string | undefined;
    } & { [K_1 in Exclude<keyof I_1, "deployer">]: never; }>(object: I_1): QueryFeeSharesRequest;
};
export declare const QueryFeeSharesResponse: {
    encode(message: QueryFeeSharesResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryFeeSharesResponse;
    fromJSON(object: any): QueryFeeSharesResponse;
    toJSON(message: QueryFeeSharesResponse): unknown;
    create<I extends {
        feeshare?: {
            contractAddress?: string | undefined;
            deployerAddress?: string | undefined;
            withdrawerAddress?: string | undefined;
        }[] | undefined;
    } & {
        feeshare?: ({
            contractAddress?: string | undefined;
            deployerAddress?: string | undefined;
            withdrawerAddress?: string | undefined;
        }[] & ({
            contractAddress?: string | undefined;
            deployerAddress?: string | undefined;
            withdrawerAddress?: string | undefined;
        } & {
            contractAddress?: string | undefined;
            deployerAddress?: string | undefined;
            withdrawerAddress?: string | undefined;
        } & { [K in Exclude<keyof I["feeshare"][number], keyof FeeShare>]: never; })[] & { [K_1 in Exclude<keyof I["feeshare"], keyof {
            contractAddress?: string | undefined;
            deployerAddress?: string | undefined;
            withdrawerAddress?: string | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, "feeshare">]: never; }>(base?: I | undefined): QueryFeeSharesResponse;
    fromPartial<I_1 extends {
        feeshare?: {
            contractAddress?: string | undefined;
            deployerAddress?: string | undefined;
            withdrawerAddress?: string | undefined;
        }[] | undefined;
    } & {
        feeshare?: ({
            contractAddress?: string | undefined;
            deployerAddress?: string | undefined;
            withdrawerAddress?: string | undefined;
        }[] & ({
            contractAddress?: string | undefined;
            deployerAddress?: string | undefined;
            withdrawerAddress?: string | undefined;
        } & {
            contractAddress?: string | undefined;
            deployerAddress?: string | undefined;
            withdrawerAddress?: string | undefined;
        } & { [K_3 in Exclude<keyof I_1["feeshare"][number], keyof FeeShare>]: never; })[] & { [K_4 in Exclude<keyof I_1["feeshare"], keyof {
            contractAddress?: string | undefined;
            deployerAddress?: string | undefined;
            withdrawerAddress?: string | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_5 in Exclude<keyof I_1, "feeshare">]: never; }>(object: I_1): QueryFeeSharesResponse;
};
export declare const QueryFeeShareRequest: {
    encode(message: QueryFeeShareRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryFeeShareRequest;
    fromJSON(object: any): QueryFeeShareRequest;
    toJSON(message: QueryFeeShareRequest): unknown;
    create<I extends {
        contractAddress?: string | undefined;
    } & {
        contractAddress?: string | undefined;
    } & { [K in Exclude<keyof I, "contractAddress">]: never; }>(base?: I | undefined): QueryFeeShareRequest;
    fromPartial<I_1 extends {
        contractAddress?: string | undefined;
    } & {
        contractAddress?: string | undefined;
    } & { [K_1 in Exclude<keyof I_1, "contractAddress">]: never; }>(object: I_1): QueryFeeShareRequest;
};
export declare const QueryFeeShareResponse: {
    encode(message: QueryFeeShareResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryFeeShareResponse;
    fromJSON(object: any): QueryFeeShareResponse;
    toJSON(message: QueryFeeShareResponse): unknown;
    create<I extends {
        feeshare?: {
            contractAddress?: string | undefined;
            deployerAddress?: string | undefined;
            withdrawerAddress?: string | undefined;
        } | undefined;
    } & {
        feeshare?: ({
            contractAddress?: string | undefined;
            deployerAddress?: string | undefined;
            withdrawerAddress?: string | undefined;
        } & {
            contractAddress?: string | undefined;
            deployerAddress?: string | undefined;
            withdrawerAddress?: string | undefined;
        } & { [K in Exclude<keyof I["feeshare"], keyof FeeShare>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "feeshare">]: never; }>(base?: I | undefined): QueryFeeShareResponse;
    fromPartial<I_1 extends {
        feeshare?: {
            contractAddress?: string | undefined;
            deployerAddress?: string | undefined;
            withdrawerAddress?: string | undefined;
        } | undefined;
    } & {
        feeshare?: ({
            contractAddress?: string | undefined;
            deployerAddress?: string | undefined;
            withdrawerAddress?: string | undefined;
        } & {
            contractAddress?: string | undefined;
            deployerAddress?: string | undefined;
            withdrawerAddress?: string | undefined;
        } & { [K_2 in Exclude<keyof I_1["feeshare"], keyof FeeShare>]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I_1, "feeshare">]: never; }>(object: I_1): QueryFeeShareResponse;
};
export declare const QueryParamsRequest: {
    encode(_: QueryParamsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryParamsRequest;
    fromJSON(_: any): QueryParamsRequest;
    toJSON(_: QueryParamsRequest): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I | undefined): QueryParamsRequest;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): QueryParamsRequest;
};
export declare const QueryParamsResponse: {
    encode(message: QueryParamsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryParamsResponse;
    fromJSON(object: any): QueryParamsResponse;
    toJSON(message: QueryParamsResponse): unknown;
    create<I extends {
        params?: {
            enableFeeShare?: boolean | undefined;
            developerShares?: string | undefined;
            allowedDenoms?: string[] | undefined;
        } | undefined;
    } & {
        params?: ({
            enableFeeShare?: boolean | undefined;
            developerShares?: string | undefined;
            allowedDenoms?: string[] | undefined;
        } & {
            enableFeeShare?: boolean | undefined;
            developerShares?: string | undefined;
            allowedDenoms?: (string[] & string[] & { [K in Exclude<keyof I["params"]["allowedDenoms"], keyof string[]>]: never; }) | undefined;
        } & { [K_1 in Exclude<keyof I["params"], keyof ModuleParams>]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, "params">]: never; }>(base?: I | undefined): QueryParamsResponse;
    fromPartial<I_1 extends {
        params?: {
            enableFeeShare?: boolean | undefined;
            developerShares?: string | undefined;
            allowedDenoms?: string[] | undefined;
        } | undefined;
    } & {
        params?: ({
            enableFeeShare?: boolean | undefined;
            developerShares?: string | undefined;
            allowedDenoms?: string[] | undefined;
        } & {
            enableFeeShare?: boolean | undefined;
            developerShares?: string | undefined;
            allowedDenoms?: (string[] & string[] & { [K_3 in Exclude<keyof I_1["params"]["allowedDenoms"], keyof string[]>]: never; }) | undefined;
        } & { [K_4 in Exclude<keyof I_1["params"], keyof ModuleParams>]: never; }) | undefined;
    } & { [K_5 in Exclude<keyof I_1, "params">]: never; }>(object: I_1): QueryParamsResponse;
};
export declare const QueryFeeSharesByWithdrawerRequest: {
    encode(message: QueryFeeSharesByWithdrawerRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryFeeSharesByWithdrawerRequest;
    fromJSON(object: any): QueryFeeSharesByWithdrawerRequest;
    toJSON(message: QueryFeeSharesByWithdrawerRequest): unknown;
    create<I extends {
        withdrawerAddress?: string | undefined;
    } & {
        withdrawerAddress?: string | undefined;
    } & { [K in Exclude<keyof I, "withdrawerAddress">]: never; }>(base?: I | undefined): QueryFeeSharesByWithdrawerRequest;
    fromPartial<I_1 extends {
        withdrawerAddress?: string | undefined;
    } & {
        withdrawerAddress?: string | undefined;
    } & { [K_1 in Exclude<keyof I_1, "withdrawerAddress">]: never; }>(object: I_1): QueryFeeSharesByWithdrawerRequest;
};
export declare const QueryFeeSharesByWithdrawerResponse: {
    encode(message: QueryFeeSharesByWithdrawerResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryFeeSharesByWithdrawerResponse;
    fromJSON(object: any): QueryFeeSharesByWithdrawerResponse;
    toJSON(message: QueryFeeSharesByWithdrawerResponse): unknown;
    create<I extends {
        feeshare?: {
            contractAddress?: string | undefined;
            deployerAddress?: string | undefined;
            withdrawerAddress?: string | undefined;
        }[] | undefined;
    } & {
        feeshare?: ({
            contractAddress?: string | undefined;
            deployerAddress?: string | undefined;
            withdrawerAddress?: string | undefined;
        }[] & ({
            contractAddress?: string | undefined;
            deployerAddress?: string | undefined;
            withdrawerAddress?: string | undefined;
        } & {
            contractAddress?: string | undefined;
            deployerAddress?: string | undefined;
            withdrawerAddress?: string | undefined;
        } & { [K in Exclude<keyof I["feeshare"][number], keyof FeeShare>]: never; })[] & { [K_1 in Exclude<keyof I["feeshare"], keyof {
            contractAddress?: string | undefined;
            deployerAddress?: string | undefined;
            withdrawerAddress?: string | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, "feeshare">]: never; }>(base?: I | undefined): QueryFeeSharesByWithdrawerResponse;
    fromPartial<I_1 extends {
        feeshare?: {
            contractAddress?: string | undefined;
            deployerAddress?: string | undefined;
            withdrawerAddress?: string | undefined;
        }[] | undefined;
    } & {
        feeshare?: ({
            contractAddress?: string | undefined;
            deployerAddress?: string | undefined;
            withdrawerAddress?: string | undefined;
        }[] & ({
            contractAddress?: string | undefined;
            deployerAddress?: string | undefined;
            withdrawerAddress?: string | undefined;
        } & {
            contractAddress?: string | undefined;
            deployerAddress?: string | undefined;
            withdrawerAddress?: string | undefined;
        } & { [K_3 in Exclude<keyof I_1["feeshare"][number], keyof FeeShare>]: never; })[] & { [K_4 in Exclude<keyof I_1["feeshare"], keyof {
            contractAddress?: string | undefined;
            deployerAddress?: string | undefined;
            withdrawerAddress?: string | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_5 in Exclude<keyof I_1, "feeshare">]: never; }>(object: I_1): QueryFeeSharesByWithdrawerResponse;
};
/** Query defines the gRPC querier service. */
export interface Query {
    /**
     * FeeShares retrieves all FeeShares that a deployer has
     * registered
     */
    FeeShares(request: QueryFeeSharesRequest): Promise<QueryFeeSharesResponse>;
    /** FeeShare retrieves a registered FeeShare for a given contract address */
    FeeShare(request: QueryFeeShareRequest): Promise<QueryFeeShareResponse>;
    /** Params retrieves the module params */
    Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
    /**
     * FeeSharesByWithdrawer retrieves all FeeShares with a given withdrawer
     * address
     */
    FeeSharesByWithdrawer(request: QueryFeeSharesByWithdrawerRequest): Promise<QueryFeeSharesByWithdrawerResponse>;
}
export declare const QueryServiceName = "nibiru.devgas.v1.Query";
export declare class QueryClientImpl implements Query {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    FeeShares(request: QueryFeeSharesRequest): Promise<QueryFeeSharesResponse>;
    FeeShare(request: QueryFeeShareRequest): Promise<QueryFeeShareResponse>;
    Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
    FeeSharesByWithdrawer(request: QueryFeeSharesByWithdrawerRequest): Promise<QueryFeeSharesByWithdrawerResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=query.d.ts.map