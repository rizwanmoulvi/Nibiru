import _m0 from "protobufjs/minimal";
import { ModuleParams } from "./genesis";
/** MsgRegisterFeeShare defines a message that registers a FeeShare */
export interface MsgRegisterFeeShare {
    /** contract_address in bech32 format */
    contractAddress: string;
    /**
     * deployer_address is the bech32 address of message sender. It must be the
     * same the contract's admin address
     */
    deployerAddress: string;
    /**
     * withdrawer_address is the bech32 address of account receiving the
     * transaction fees
     */
    withdrawerAddress: string;
}
/** MsgRegisterFeeShareResponse defines the MsgRegisterFeeShare response type */
export interface MsgRegisterFeeShareResponse {
}
/**
 * MsgUpdateFeeShare defines a message that updates the withdrawer address for a
 * registered FeeShare
 */
export interface MsgUpdateFeeShare {
    /** contract_address in bech32 format */
    contractAddress: string;
    /**
     * deployer_address is the bech32 address of message sender. It must be the
     * same the contract's admin address
     */
    deployerAddress: string;
    /**
     * withdrawer_address is the bech32 address of account receiving the
     * transaction fees
     */
    withdrawerAddress: string;
}
/** MsgUpdateFeeShareResponse defines the MsgUpdateFeeShare response type */
export interface MsgUpdateFeeShareResponse {
}
/** MsgCancelFeeShare defines a message that cancels a registered FeeShare */
export interface MsgCancelFeeShare {
    /** contract_address in bech32 format */
    contractAddress: string;
    /**
     * deployer_address is the bech32 address of message sender. It must be the
     * same the contract's admin address
     */
    deployerAddress: string;
}
/** MsgCancelFeeShareResponse defines the MsgCancelFeeShare response type */
export interface MsgCancelFeeShareResponse {
}
/**
 * MsgUpdateParams is the Msg/UpdateParams request type.
 *
 * Since: cosmos-sdk 0.47
 */
export interface MsgUpdateParams {
    /**
     * authority is the address that controls the module (defaults to x/gov unless
     * overwritten).
     */
    authority: string;
    /**
     * params defines the x/feeshare parameters to update.
     *
     * NOTE: All parameters must be supplied.
     */
    params?: ModuleParams;
}
/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 *
 * Since: cosmos-sdk 0.47
 */
export interface MsgUpdateParamsResponse {
}
export declare const MsgRegisterFeeShare: {
    encode(message: MsgRegisterFeeShare, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgRegisterFeeShare;
    fromJSON(object: any): MsgRegisterFeeShare;
    toJSON(message: MsgRegisterFeeShare): unknown;
    create<I extends {
        contractAddress?: string | undefined;
        deployerAddress?: string | undefined;
        withdrawerAddress?: string | undefined;
    } & {
        contractAddress?: string | undefined;
        deployerAddress?: string | undefined;
        withdrawerAddress?: string | undefined;
    } & { [K in Exclude<keyof I, keyof MsgRegisterFeeShare>]: never; }>(base?: I | undefined): MsgRegisterFeeShare;
    fromPartial<I_1 extends {
        contractAddress?: string | undefined;
        deployerAddress?: string | undefined;
        withdrawerAddress?: string | undefined;
    } & {
        contractAddress?: string | undefined;
        deployerAddress?: string | undefined;
        withdrawerAddress?: string | undefined;
    } & { [K_1 in Exclude<keyof I_1, keyof MsgRegisterFeeShare>]: never; }>(object: I_1): MsgRegisterFeeShare;
};
export declare const MsgRegisterFeeShareResponse: {
    encode(_: MsgRegisterFeeShareResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgRegisterFeeShareResponse;
    fromJSON(_: any): MsgRegisterFeeShareResponse;
    toJSON(_: MsgRegisterFeeShareResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I | undefined): MsgRegisterFeeShareResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): MsgRegisterFeeShareResponse;
};
export declare const MsgUpdateFeeShare: {
    encode(message: MsgUpdateFeeShare, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateFeeShare;
    fromJSON(object: any): MsgUpdateFeeShare;
    toJSON(message: MsgUpdateFeeShare): unknown;
    create<I extends {
        contractAddress?: string | undefined;
        deployerAddress?: string | undefined;
        withdrawerAddress?: string | undefined;
    } & {
        contractAddress?: string | undefined;
        deployerAddress?: string | undefined;
        withdrawerAddress?: string | undefined;
    } & { [K in Exclude<keyof I, keyof MsgUpdateFeeShare>]: never; }>(base?: I | undefined): MsgUpdateFeeShare;
    fromPartial<I_1 extends {
        contractAddress?: string | undefined;
        deployerAddress?: string | undefined;
        withdrawerAddress?: string | undefined;
    } & {
        contractAddress?: string | undefined;
        deployerAddress?: string | undefined;
        withdrawerAddress?: string | undefined;
    } & { [K_1 in Exclude<keyof I_1, keyof MsgUpdateFeeShare>]: never; }>(object: I_1): MsgUpdateFeeShare;
};
export declare const MsgUpdateFeeShareResponse: {
    encode(_: MsgUpdateFeeShareResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateFeeShareResponse;
    fromJSON(_: any): MsgUpdateFeeShareResponse;
    toJSON(_: MsgUpdateFeeShareResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I | undefined): MsgUpdateFeeShareResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): MsgUpdateFeeShareResponse;
};
export declare const MsgCancelFeeShare: {
    encode(message: MsgCancelFeeShare, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgCancelFeeShare;
    fromJSON(object: any): MsgCancelFeeShare;
    toJSON(message: MsgCancelFeeShare): unknown;
    create<I extends {
        contractAddress?: string | undefined;
        deployerAddress?: string | undefined;
    } & {
        contractAddress?: string | undefined;
        deployerAddress?: string | undefined;
    } & { [K in Exclude<keyof I, keyof MsgCancelFeeShare>]: never; }>(base?: I | undefined): MsgCancelFeeShare;
    fromPartial<I_1 extends {
        contractAddress?: string | undefined;
        deployerAddress?: string | undefined;
    } & {
        contractAddress?: string | undefined;
        deployerAddress?: string | undefined;
    } & { [K_1 in Exclude<keyof I_1, keyof MsgCancelFeeShare>]: never; }>(object: I_1): MsgCancelFeeShare;
};
export declare const MsgCancelFeeShareResponse: {
    encode(_: MsgCancelFeeShareResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgCancelFeeShareResponse;
    fromJSON(_: any): MsgCancelFeeShareResponse;
    toJSON(_: MsgCancelFeeShareResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I | undefined): MsgCancelFeeShareResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): MsgCancelFeeShareResponse;
};
export declare const MsgUpdateParams: {
    encode(message: MsgUpdateParams, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateParams;
    fromJSON(object: any): MsgUpdateParams;
    toJSON(message: MsgUpdateParams): unknown;
    create<I extends {
        authority?: string | undefined;
        params?: {
            enableFeeShare?: boolean | undefined;
            developerShares?: string | undefined;
            allowedDenoms?: string[] | undefined;
        } | undefined;
    } & {
        authority?: string | undefined;
        params?: ({
            enableFeeShare?: boolean | undefined;
            developerShares?: string | undefined;
            allowedDenoms?: string[] | undefined;
        } & {
            enableFeeShare?: boolean | undefined;
            developerShares?: string | undefined;
            allowedDenoms?: (string[] & string[] & { [K in Exclude<keyof I["params"]["allowedDenoms"], keyof string[]>]: never; }) | undefined;
        } & { [K_1 in Exclude<keyof I["params"], keyof ModuleParams>]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, keyof MsgUpdateParams>]: never; }>(base?: I | undefined): MsgUpdateParams;
    fromPartial<I_1 extends {
        authority?: string | undefined;
        params?: {
            enableFeeShare?: boolean | undefined;
            developerShares?: string | undefined;
            allowedDenoms?: string[] | undefined;
        } | undefined;
    } & {
        authority?: string | undefined;
        params?: ({
            enableFeeShare?: boolean | undefined;
            developerShares?: string | undefined;
            allowedDenoms?: string[] | undefined;
        } & {
            enableFeeShare?: boolean | undefined;
            developerShares?: string | undefined;
            allowedDenoms?: (string[] & string[] & { [K_3 in Exclude<keyof I_1["params"]["allowedDenoms"], keyof string[]>]: never; }) | undefined;
        } & { [K_4 in Exclude<keyof I_1["params"], keyof ModuleParams>]: never; }) | undefined;
    } & { [K_5 in Exclude<keyof I_1, keyof MsgUpdateParams>]: never; }>(object: I_1): MsgUpdateParams;
};
export declare const MsgUpdateParamsResponse: {
    encode(_: MsgUpdateParamsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateParamsResponse;
    fromJSON(_: any): MsgUpdateParamsResponse;
    toJSON(_: MsgUpdateParamsResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I | undefined): MsgUpdateParamsResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): MsgUpdateParamsResponse;
};
/** Msg defines the fees Msg service. */
export interface Msg {
    /** RegisterFeeShare registers a new contract for receiving transaction fees */
    RegisterFeeShare(request: MsgRegisterFeeShare): Promise<MsgRegisterFeeShareResponse>;
    /** UpdateFeeShare updates the withdrawer address of a FeeShare */
    UpdateFeeShare(request: MsgUpdateFeeShare): Promise<MsgUpdateFeeShareResponse>;
    /**
     * CancelFeeShare cancels a contract's fee registration and further receival
     * of transaction fees
     */
    CancelFeeShare(request: MsgCancelFeeShare): Promise<MsgCancelFeeShareResponse>;
    /** Update the params of the module through gov v1 type. */
    UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
}
export declare const MsgServiceName = "nibiru.devgas.v1.Msg";
export declare class MsgClientImpl implements Msg {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    RegisterFeeShare(request: MsgRegisterFeeShare): Promise<MsgRegisterFeeShareResponse>;
    UpdateFeeShare(request: MsgUpdateFeeShare): Promise<MsgUpdateFeeShareResponse>;
    CancelFeeShare(request: MsgCancelFeeShare): Promise<MsgCancelFeeShareResponse>;
    UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=tx.d.ts.map