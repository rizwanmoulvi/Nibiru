import _m0 from "protobufjs/minimal";
/**
 * InflationDistribution defines the distribution in which inflation is
 * allocated through minting on each epoch (staking, community, strategic). It
 * excludes the team vesting distribution.
 */
export interface InflationDistribution {
    /**
     * staking_rewards defines the proportion of the minted_denom that is
     * to be allocated as staking rewards
     */
    stakingRewards: string;
    /**
     * community_pool defines the proportion of the minted_denom that is to
     * be allocated to the community pool
     */
    communityPool: string;
    /**
     * strategic_reserves defines the proportion of the minted_denom that
     * is to be allocated to the strategic reserves module address
     */
    strategicReserves: string;
}
export declare const InflationDistribution: {
    encode(message: InflationDistribution, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): InflationDistribution;
    fromJSON(object: any): InflationDistribution;
    toJSON(message: InflationDistribution): unknown;
    create<I extends {
        stakingRewards?: string | undefined;
        communityPool?: string | undefined;
        strategicReserves?: string | undefined;
    } & {
        stakingRewards?: string | undefined;
        communityPool?: string | undefined;
        strategicReserves?: string | undefined;
    } & { [K in Exclude<keyof I, keyof InflationDistribution>]: never; }>(base?: I | undefined): InflationDistribution;
    fromPartial<I_1 extends {
        stakingRewards?: string | undefined;
        communityPool?: string | undefined;
        strategicReserves?: string | undefined;
    } & {
        stakingRewards?: string | undefined;
        communityPool?: string | undefined;
        strategicReserves?: string | undefined;
    } & { [K_1 in Exclude<keyof I_1, keyof InflationDistribution>]: never; }>(object: I_1): InflationDistribution;
};
//# sourceMappingURL=inflation.d.ts.map