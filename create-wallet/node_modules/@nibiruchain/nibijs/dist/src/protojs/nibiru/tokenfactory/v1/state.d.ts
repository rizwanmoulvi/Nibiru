import Long from "long";
import _m0 from "protobufjs/minimal";
/**
 * DenomAuthorityMetadata specifies metadata foraddresses that have specific
 * capabilities over a token factory denom. Right now there is only one Admin
 * permission, but is planned to be extended to the future.
 */
export interface DenomAuthorityMetadata {
    /**
     * Admin: Bech32 address of the admin for the tokefactory denom. Can be empty
     * for no admin.
     */
    admin: string;
}
/**
 * ModuleParams defines the parameters for the tokenfactory module.
 *
 * ### On Denom Creation Costs
 *
 * We'd like for fees to be paid by the user/signer of a ransaction, but in many
 * casess, token creation is abstracted away behind a smart contract. Setting a
 * nonzero `denom_creation_fee` would force each contract to handle collecting
 * and paying a fees for denom (factory/{contract-addr}/{subdenom}) creation on
 * behalf of the end user.
 *
 * For IBC token transfers, it's unclear who should pay the feeâ€”the contract,
 * the relayer, or the original sender?
 * > "Charging fees will mess up composability, the same way Terra transfer tax
 *   caused all kinds of headaches for contract devs." - @ethanfrey
 *
 * ### Recommended Solution
 *
 * Have the end user (signer) pay fees directly in the form of higher gas costs.
 * This way, contracts won't need to handle collecting or paying fees. And for
 * IBC, the gas costs are already paid by the original sender and can be
 * estimated by the relayer. It's easier to tune gas costs to make spam
 * prohibitively expensive since there are per-transaction and per-block gas
 * limits.
 *
 * See https://github.com/CosmWasm/token-factory/issues/11 for the initial
 * discussion of the issue with @ethanfrey and @valardragon.
 */
export interface ModuleParams {
    /**
     * Adds gas consumption to the execution of `MsgCreateDenom` as a method of
     * spam prevention. Defaults to 10 NIBI.
     */
    denomCreationGasConsume: Long;
}
/**
 * TFDenom is a token factory (TF) denom. The canonical representation is
 * "tf/{creator}/{subdenom}", its unique denomination in the x/bank module.
 */
export interface TFDenom {
    /** Creator: Bech32 address of the creator of the denom. */
    creator: string;
    /**
     * Subdenom: Unique suffix of a token factory denom. A subdenom is specific
     * to a given creator. It is the name given during a token factory "Mint".
     */
    subdenom: string;
}
/** GenesisState for the Token Factory module. */
export interface GenesisState {
    params?: ModuleParams;
    factoryDenoms: GenesisDenom[];
}
/** GenesisDenom defines a tokenfactory denoms in the genesis state. */
export interface GenesisDenom {
    denom: string;
    authorityMetadata?: DenomAuthorityMetadata;
}
export declare const DenomAuthorityMetadata: {
    encode(message: DenomAuthorityMetadata, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DenomAuthorityMetadata;
    fromJSON(object: any): DenomAuthorityMetadata;
    toJSON(message: DenomAuthorityMetadata): unknown;
    create<I extends {
        admin?: string | undefined;
    } & {
        admin?: string | undefined;
    } & { [K in Exclude<keyof I, "admin">]: never; }>(base?: I | undefined): DenomAuthorityMetadata;
    fromPartial<I_1 extends {
        admin?: string | undefined;
    } & {
        admin?: string | undefined;
    } & { [K_1 in Exclude<keyof I_1, "admin">]: never; }>(object: I_1): DenomAuthorityMetadata;
};
export declare const ModuleParams: {
    encode(message: ModuleParams, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ModuleParams;
    fromJSON(object: any): ModuleParams;
    toJSON(message: ModuleParams): unknown;
    create<I extends {
        denomCreationGasConsume?: string | number | Long | undefined;
    } & {
        denomCreationGasConsume?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K in Exclude<keyof I["denomCreationGasConsume"], keyof Long>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "denomCreationGasConsume">]: never; }>(base?: I | undefined): ModuleParams;
    fromPartial<I_1 extends {
        denomCreationGasConsume?: string | number | Long | undefined;
    } & {
        denomCreationGasConsume?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K_2 in Exclude<keyof I_1["denomCreationGasConsume"], keyof Long>]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I_1, "denomCreationGasConsume">]: never; }>(object: I_1): ModuleParams;
};
export declare const TFDenom: {
    encode(message: TFDenom, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TFDenom;
    fromJSON(object: any): TFDenom;
    toJSON(message: TFDenom): unknown;
    create<I extends {
        creator?: string | undefined;
        subdenom?: string | undefined;
    } & {
        creator?: string | undefined;
        subdenom?: string | undefined;
    } & { [K in Exclude<keyof I, keyof TFDenom>]: never; }>(base?: I | undefined): TFDenom;
    fromPartial<I_1 extends {
        creator?: string | undefined;
        subdenom?: string | undefined;
    } & {
        creator?: string | undefined;
        subdenom?: string | undefined;
    } & { [K_1 in Exclude<keyof I_1, keyof TFDenom>]: never; }>(object: I_1): TFDenom;
};
export declare const GenesisState: {
    encode(message: GenesisState, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GenesisState;
    fromJSON(object: any): GenesisState;
    toJSON(message: GenesisState): unknown;
    create<I extends {
        params?: {
            denomCreationGasConsume?: string | number | Long | undefined;
        } | undefined;
        factoryDenoms?: {
            denom?: string | undefined;
            authorityMetadata?: {
                admin?: string | undefined;
            } | undefined;
        }[] | undefined;
    } & {
        params?: ({
            denomCreationGasConsume?: string | number | Long | undefined;
        } & {
            denomCreationGasConsume?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K in Exclude<keyof I["params"]["denomCreationGasConsume"], keyof Long>]: never; }) | undefined;
        } & { [K_1 in Exclude<keyof I["params"], "denomCreationGasConsume">]: never; }) | undefined;
        factoryDenoms?: ({
            denom?: string | undefined;
            authorityMetadata?: {
                admin?: string | undefined;
            } | undefined;
        }[] & ({
            denom?: string | undefined;
            authorityMetadata?: {
                admin?: string | undefined;
            } | undefined;
        } & {
            denom?: string | undefined;
            authorityMetadata?: ({
                admin?: string | undefined;
            } & {
                admin?: string | undefined;
            } & { [K_2 in Exclude<keyof I["factoryDenoms"][number]["authorityMetadata"], "admin">]: never; }) | undefined;
        } & { [K_3 in Exclude<keyof I["factoryDenoms"][number], keyof GenesisDenom>]: never; })[] & { [K_4 in Exclude<keyof I["factoryDenoms"], keyof {
            denom?: string | undefined;
            authorityMetadata?: {
                admin?: string | undefined;
            } | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_5 in Exclude<keyof I, keyof GenesisState>]: never; }>(base?: I | undefined): GenesisState;
    fromPartial<I_1 extends {
        params?: {
            denomCreationGasConsume?: string | number | Long | undefined;
        } | undefined;
        factoryDenoms?: {
            denom?: string | undefined;
            authorityMetadata?: {
                admin?: string | undefined;
            } | undefined;
        }[] | undefined;
    } & {
        params?: ({
            denomCreationGasConsume?: string | number | Long | undefined;
        } & {
            denomCreationGasConsume?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_6 in Exclude<keyof I_1["params"]["denomCreationGasConsume"], keyof Long>]: never; }) | undefined;
        } & { [K_7 in Exclude<keyof I_1["params"], "denomCreationGasConsume">]: never; }) | undefined;
        factoryDenoms?: ({
            denom?: string | undefined;
            authorityMetadata?: {
                admin?: string | undefined;
            } | undefined;
        }[] & ({
            denom?: string | undefined;
            authorityMetadata?: {
                admin?: string | undefined;
            } | undefined;
        } & {
            denom?: string | undefined;
            authorityMetadata?: ({
                admin?: string | undefined;
            } & {
                admin?: string | undefined;
            } & { [K_8 in Exclude<keyof I_1["factoryDenoms"][number]["authorityMetadata"], "admin">]: never; }) | undefined;
        } & { [K_9 in Exclude<keyof I_1["factoryDenoms"][number], keyof GenesisDenom>]: never; })[] & { [K_10 in Exclude<keyof I_1["factoryDenoms"], keyof {
            denom?: string | undefined;
            authorityMetadata?: {
                admin?: string | undefined;
            } | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_11 in Exclude<keyof I_1, keyof GenesisState>]: never; }>(object: I_1): GenesisState;
};
export declare const GenesisDenom: {
    encode(message: GenesisDenom, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GenesisDenom;
    fromJSON(object: any): GenesisDenom;
    toJSON(message: GenesisDenom): unknown;
    create<I extends {
        denom?: string | undefined;
        authorityMetadata?: {
            admin?: string | undefined;
        } | undefined;
    } & {
        denom?: string | undefined;
        authorityMetadata?: ({
            admin?: string | undefined;
        } & {
            admin?: string | undefined;
        } & { [K in Exclude<keyof I["authorityMetadata"], "admin">]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, keyof GenesisDenom>]: never; }>(base?: I | undefined): GenesisDenom;
    fromPartial<I_1 extends {
        denom?: string | undefined;
        authorityMetadata?: {
            admin?: string | undefined;
        } | undefined;
    } & {
        denom?: string | undefined;
        authorityMetadata?: ({
            admin?: string | undefined;
        } & {
            admin?: string | undefined;
        } & { [K_2 in Exclude<keyof I_1["authorityMetadata"], "admin">]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I_1, keyof GenesisDenom>]: never; }>(object: I_1): GenesisDenom;
};
//# sourceMappingURL=state.d.ts.map