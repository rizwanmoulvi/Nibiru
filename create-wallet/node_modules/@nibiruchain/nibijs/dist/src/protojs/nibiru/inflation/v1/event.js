"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventInflationDistribution = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const coin_1 = require("../../../cosmos/base/v1beta1/coin");
function createBaseEventInflationDistribution() {
    return { stakingRewards: undefined, strategicReserve: undefined, communityPool: undefined };
}
exports.EventInflationDistribution = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.stakingRewards !== undefined) {
            coin_1.Coin.encode(message.stakingRewards, writer.uint32(10).fork()).ldelim();
        }
        if (message.strategicReserve !== undefined) {
            coin_1.Coin.encode(message.strategicReserve, writer.uint32(18).fork()).ldelim();
        }
        if (message.communityPool !== undefined) {
            coin_1.Coin.encode(message.communityPool, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventInflationDistribution();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.stakingRewards = coin_1.Coin.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.strategicReserve = coin_1.Coin.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.communityPool = coin_1.Coin.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            stakingRewards: isSet(object.stakingRewards) ? coin_1.Coin.fromJSON(object.stakingRewards) : undefined,
            strategicReserve: isSet(object.strategicReserve) ? coin_1.Coin.fromJSON(object.strategicReserve) : undefined,
            communityPool: isSet(object.communityPool) ? coin_1.Coin.fromJSON(object.communityPool) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.stakingRewards !== undefined &&
            (obj.stakingRewards = message.stakingRewards ? coin_1.Coin.toJSON(message.stakingRewards) : undefined);
        message.strategicReserve !== undefined &&
            (obj.strategicReserve = message.strategicReserve ? coin_1.Coin.toJSON(message.strategicReserve) : undefined);
        message.communityPool !== undefined &&
            (obj.communityPool = message.communityPool ? coin_1.Coin.toJSON(message.communityPool) : undefined);
        return obj;
    },
    create(base) {
        return exports.EventInflationDistribution.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseEventInflationDistribution();
        message.stakingRewards = (object.stakingRewards !== undefined && object.stakingRewards !== null)
            ? coin_1.Coin.fromPartial(object.stakingRewards)
            : undefined;
        message.strategicReserve = (object.strategicReserve !== undefined && object.strategicReserve !== null)
            ? coin_1.Coin.fromPartial(object.strategicReserve)
            : undefined;
        message.communityPool = (object.communityPool !== undefined && object.communityPool !== null)
            ? coin_1.Coin.fromPartial(object.communityPool)
            : undefined;
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=event.js.map