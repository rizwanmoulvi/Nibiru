"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModuleParams = exports.GenesisState = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const devgas_1 = require("./devgas");
function createBaseGenesisState() {
    return { params: undefined, feeShare: [] };
}
exports.GenesisState = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.params !== undefined) {
            exports.ModuleParams.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.feeShare) {
            devgas_1.FeeShare.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenesisState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.params = exports.ModuleParams.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.feeShare.push(devgas_1.FeeShare.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            params: isSet(object.params) ? exports.ModuleParams.fromJSON(object.params) : undefined,
            feeShare: Array.isArray(object === null || object === void 0 ? void 0 : object.feeShare) ? object.feeShare.map((e) => devgas_1.FeeShare.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        message.params !== undefined && (obj.params = message.params ? exports.ModuleParams.toJSON(message.params) : undefined);
        if (message.feeShare) {
            obj.feeShare = message.feeShare.map((e) => e ? devgas_1.FeeShare.toJSON(e) : undefined);
        }
        else {
            obj.feeShare = [];
        }
        return obj;
    },
    create(base) {
        return exports.GenesisState.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGenesisState();
        message.params = (object.params !== undefined && object.params !== null)
            ? exports.ModuleParams.fromPartial(object.params)
            : undefined;
        message.feeShare = ((_a = object.feeShare) === null || _a === void 0 ? void 0 : _a.map((e) => devgas_1.FeeShare.fromPartial(e))) || [];
        return message;
    },
};
function createBaseModuleParams() {
    return { enableFeeShare: false, developerShares: "", allowedDenoms: [] };
}
exports.ModuleParams = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.enableFeeShare === true) {
            writer.uint32(8).bool(message.enableFeeShare);
        }
        if (message.developerShares !== "") {
            writer.uint32(18).string(message.developerShares);
        }
        for (const v of message.allowedDenoms) {
            writer.uint32(26).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseModuleParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.enableFeeShare = reader.bool();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.developerShares = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.allowedDenoms.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            enableFeeShare: isSet(object.enableFeeShare) ? Boolean(object.enableFeeShare) : false,
            developerShares: isSet(object.developerShares) ? String(object.developerShares) : "",
            allowedDenoms: Array.isArray(object === null || object === void 0 ? void 0 : object.allowedDenoms) ? object.allowedDenoms.map((e) => String(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        message.enableFeeShare !== undefined && (obj.enableFeeShare = message.enableFeeShare);
        message.developerShares !== undefined && (obj.developerShares = message.developerShares);
        if (message.allowedDenoms) {
            obj.allowedDenoms = message.allowedDenoms.map((e) => e);
        }
        else {
            obj.allowedDenoms = [];
        }
        return obj;
    },
    create(base) {
        return exports.ModuleParams.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseModuleParams();
        message.enableFeeShare = (_a = object.enableFeeShare) !== null && _a !== void 0 ? _a : false;
        message.developerShares = (_b = object.developerShares) !== null && _b !== void 0 ? _b : "";
        message.allowedDenoms = ((_c = object.allowedDenoms) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=genesis.js.map