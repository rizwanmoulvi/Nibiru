import _m0 from "protobufjs/minimal";
export interface Sudoers {
    /** Root: The "root" user. */
    root: string;
    /** Contracts: The set of contracts with elevated permissions. */
    contracts: string[];
}
/** GenesisState: State for migrations and genesis for the x/sudo module. */
export interface GenesisState {
    sudoers?: Sudoers;
}
export declare const Sudoers: {
    encode(message: Sudoers, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Sudoers;
    fromJSON(object: any): Sudoers;
    toJSON(message: Sudoers): unknown;
    create<I extends {
        root?: string | undefined;
        contracts?: string[] | undefined;
    } & {
        root?: string | undefined;
        contracts?: (string[] & string[] & { [K in Exclude<keyof I["contracts"], keyof string[]>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, keyof Sudoers>]: never; }>(base?: I | undefined): Sudoers;
    fromPartial<I_1 extends {
        root?: string | undefined;
        contracts?: string[] | undefined;
    } & {
        root?: string | undefined;
        contracts?: (string[] & string[] & { [K_2 in Exclude<keyof I_1["contracts"], keyof string[]>]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I_1, keyof Sudoers>]: never; }>(object: I_1): Sudoers;
};
export declare const GenesisState: {
    encode(message: GenesisState, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GenesisState;
    fromJSON(object: any): GenesisState;
    toJSON(message: GenesisState): unknown;
    create<I extends {
        sudoers?: {
            root?: string | undefined;
            contracts?: string[] | undefined;
        } | undefined;
    } & {
        sudoers?: ({
            root?: string | undefined;
            contracts?: string[] | undefined;
        } & {
            root?: string | undefined;
            contracts?: (string[] & string[] & { [K in Exclude<keyof I["sudoers"]["contracts"], keyof string[]>]: never; }) | undefined;
        } & { [K_1 in Exclude<keyof I["sudoers"], keyof Sudoers>]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, "sudoers">]: never; }>(base?: I | undefined): GenesisState;
    fromPartial<I_1 extends {
        sudoers?: {
            root?: string | undefined;
            contracts?: string[] | undefined;
        } | undefined;
    } & {
        sudoers?: ({
            root?: string | undefined;
            contracts?: string[] | undefined;
        } & {
            root?: string | undefined;
            contracts?: (string[] & string[] & { [K_3 in Exclude<keyof I_1["sudoers"]["contracts"], keyof string[]>]: never; }) | undefined;
        } & { [K_4 in Exclude<keyof I_1["sudoers"], keyof Sudoers>]: never; }) | undefined;
    } & { [K_5 in Exclude<keyof I_1, "sudoers">]: never; }>(object: I_1): GenesisState;
};
//# sourceMappingURL=state.d.ts.map