"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("..");
describe("queryBatchHandler tests", () => {
    test("queryBatchHandler", () => __awaiter(void 0, void 0, void 0, function* () {
        var _a, _b, _c;
        const resp = yield (0, __1.queryBatchHandler)([
            (0, __1.communityPoolQueryString)({}, true, __1.defaultToken),
            (0, __1.featureFlagsQueryString)(true, __1.defaultFeatureFlags),
        ], "https://hm-graphql.testnet-1.nibiru.fi/query");
        expect(resp).toHaveProperty("communityPool");
        expect(resp).toHaveProperty("featureFlags");
        if (((_b = (_a = resp.communityPool) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0) {
            const [communityPool] = (_c = resp.communityPool) !== null && _c !== void 0 ? _c : [];
            (0, __1.checkFields)([communityPool], ["amount", "denom"]);
        }
        if (resp.featureFlags) {
            const { featureFlags } = resp;
            (0, __1.checkFields)([featureFlags], ["gov", "oracle", "perp", "spot", "staking", "wasm"]);
        }
    }));
    test("arg", () => __awaiter(void 0, void 0, void 0, function* () {
        const result = (0, __1.arg)("mock", "mock", false);
        expect(result).toEqual(`mock: "mock"`);
    }));
});
//# sourceMappingURL=consts.test.js.map