"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.doGqlQuery = exports.gqlQuery = exports.cleanResponse = exports.convertObjectToPropertiesString = exports.getWhereArgArr = exports.objToGql = exports.arg = exports.queryBatchHandler = exports.checkFields = void 0;
const cross_fetch_1 = require("cross-fetch");
const checkFields = (objects, fields) => {
    objects.forEach((obj) => {
        fields.forEach((field) => {
            expect(obj).toHaveProperty(field);
        });
    });
};
exports.checkFields = checkFields;
const queryBatchHandler = (queryQueryStrings, endpt) => __awaiter(void 0, void 0, void 0, function* () { return (0, exports.doGqlQuery)(`{ ${queryQueryStrings.join("\n")} }`, endpt); });
exports.queryBatchHandler = queryBatchHandler;
const arg = (name, value, ignoreQuotes) => {
    const isString = typeof value === "string" && !ignoreQuotes ? `"` : "";
    return typeof value === "object"
        ? `${name}: ${(0, exports.objToGql)(value)}`
        : `${name}: ${isString}${value}${isString}`;
};
exports.arg = arg;
const objToGql = (obj) => {
    // Make sure we don't alter integers.
    if (typeof obj === "number") {
        return obj;
    }
    // Stringify everything other than objects and arrays.
    if (typeof obj !== "object" || Array.isArray(obj)) {
        return JSON.stringify(obj);
    }
    // Iterate through object keys to convert into a string
    // to be interpolated into the query.
    const res = `{
    ${Object.keys(obj)
        .map((key) => `${key}:${(0, exports.objToGql)(obj[key])}`)
        .join(", ")}
  }`;
    return res;
};
exports.objToGql = objToGql;
const getWhereArgArr = (whereArgs) => `where: ${(0, exports.objToGql)(whereArgs)}`;
exports.getWhereArgArr = getWhereArgArr;
const convertObjectToPropertiesString = (obj) => {
    let result = "";
    for (const key in obj) {
        const value = obj[key];
        if (Array.isArray(value)) {
            const innerString = value
                .map((item) => `${key} {
              ${(0, exports.convertObjectToPropertiesString)(item)}
            }`)
                .join("\n");
            result += `${innerString}\n`;
        }
        else if (typeof value === "object" && value !== null) {
            result += `${key} {
                  ${(0, exports.convertObjectToPropertiesString)(value)}
                }\n`;
        }
        else {
            result += `${key}\n`;
        }
    }
    return result;
};
exports.convertObjectToPropertiesString = convertObjectToPropertiesString;
const cleanResponse = (rawResp) => __awaiter(void 0, void 0, void 0, function* () {
    const respJson = yield rawResp.json().catch((err) => {
        console.error(err);
        return undefined;
    });
    // console.debug("DEBUG respJson: %o", respJson)
    if (respJson === null || respJson === void 0 ? void 0 : respJson.data) {
        return respJson.data;
    }
    return respJson;
});
exports.cleanResponse = cleanResponse;
const gqlQuery = (name, typedQueryArgs, properties, excludeParentObject) => {
    const queryArgList = [];
    if (typedQueryArgs.where !== undefined) {
        queryArgList.push((0, exports.getWhereArgArr)(typedQueryArgs.where));
    }
    delete typedQueryArgs.where;
    Object.keys(typedQueryArgs).forEach((key) => queryArgList.push((0, exports.arg)(key, typedQueryArgs[key], true)));
    const hasQueryList = (char) => (queryArgList.length > 0 ? char : "");
    return `${excludeParentObject ? "" : "{"}
    ${name} ${hasQueryList("(")}${queryArgList.join(", ")}${hasQueryList(")")} {
      ${properties}
    }
    ${excludeParentObject ? "" : "}"}`;
};
exports.gqlQuery = gqlQuery;
const doGqlQuery = (gqlQuery, gqlEndpt, headers) => __awaiter(void 0, void 0, void 0, function* () {
    const rawResp = yield (0, cross_fetch_1.fetch)(gqlEndpt, {
        method: "POST",
        headers: Object.assign({ "Content-Type": "application/json" }, headers),
        body: JSON.stringify({ query: gqlQuery }),
    });
    return (0, exports.cleanResponse)(rawResp);
});
exports.doGqlQuery = doGqlQuery;
//# sourceMappingURL=consts.js.map