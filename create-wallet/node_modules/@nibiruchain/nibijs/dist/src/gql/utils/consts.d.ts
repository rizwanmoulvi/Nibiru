type OptionalArrayOr<T, Otherwise> = T extends T[] ? T[] | undefined : Otherwise;
type OptionalUndefinedOr<T, Otherwise> = T extends undefined ? undefined : Otherwise;
type OptionalNullOr<T, Otherwise> = T extends null ? null | undefined : Otherwise;
type OptionalStringOr<T, Otherwise> = T extends string ? T | undefined : Otherwise;
type OptionalNumberOr<T, Otherwise> = T extends number ? T | undefined : Otherwise;
type OptionalBooleanOr<T, Otherwise> = T extends boolean ? boolean | undefined : Otherwise;
/**
 * DeepPartial: A utility type that makes every field and nested field of an
 * object optional. This is useful for writing GraphQL queries that only use a
 * subset of fields and enables you to only pull in what's needed.
 *
 * Without `DeepPartial<T>`, we would have to query entire objects for different
 * fields, which adds unnecessary bloat to the both the server and corresponding
 * response.
 * */
export type DeepPartial<T> = OptionalStringOr<T, OptionalNumberOr<T, OptionalBooleanOr<T, OptionalNullOr<T, OptionalUndefinedOr<T, OptionalArrayOr<T, T extends object ? {
    [Key in keyof T]?: DeepPartial<T[Key]>;
} : undefined>>>>>>;
export type IterableDictionary<T> = {
    [key: string]: T;
};
export declare const checkFields: <T>(objects: T[], fields: string[]) => void;
export declare const queryBatchHandler: <T>(queryQueryStrings: string[], endpt: string) => Promise<T>;
export declare const arg: <T>(name: string, value: unknown, ignoreQuotes?: boolean) => string;
export declare const objToGql: <T>(obj: IterableDictionary<T>) => string | number;
export declare const getWhereArgArr: <T>(whereArgs: IterableDictionary<T>) => string;
export declare const convertObjectToPropertiesString: <T>(obj: IterableDictionary<T>) => string;
export declare const cleanResponse: (rawResp: Response) => Promise<any>;
export declare const gqlQuery: <T>(name: string, typedQueryArgs: IterableDictionary<T>, properties: string, excludeParentObject?: boolean) => string;
export declare const doGqlQuery: <T>(gqlQuery: string, gqlEndpt: string, headers?: HeadersInit) => Promise<T>;
export {};
//# sourceMappingURL=consts.d.ts.map