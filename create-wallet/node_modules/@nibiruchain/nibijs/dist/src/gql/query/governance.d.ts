import { GQLQuery, GQLGovernanceGqlGovDepositsArgs, GQLGovernanceGqlGovProposalsArgs, GQLGovernanceGqlGovVotesArgs, GQLGovDeposit, GQLGovProposal, GQLGovVote, DeepPartial } from "..";
export type QueryGovernanceArgs = {
    govDeposits?: GQLGovernanceGqlGovDepositsArgs;
    govProposals?: GQLGovernanceGqlGovProposalsArgs;
    govVotes?: GQLGovernanceGqlGovVotesArgs;
};
export interface GqlOutGovernance {
    governance?: GQLQuery["governance"];
}
export type GovernanceFields = DeepPartial<{
    govDeposits?: DeepPartial<GQLGovDeposit>;
    govProposals?: DeepPartial<GQLGovProposal>;
    govVotes?: DeepPartial<GQLGovVote>;
}>;
export declare const governanceQueryString: (args: QueryGovernanceArgs, fields: GovernanceFields) => string;
export declare const governance: (args: QueryGovernanceArgs, endpt: string, fields: GovernanceFields) => Promise<GqlOutGovernance>;
//# sourceMappingURL=governance.d.ts.map