"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.staking = exports.GQLStakingQueryString = void 0;
const utils_1 = require("../utils");
const GQLStakingQueryString = (args, fields) => {
    var _a, _b, _c, _d, _e;
    const GQLStakingQuery = [];
    if (fields === null || fields === void 0 ? void 0 : fields.delegations) {
        GQLStakingQuery.push((0, utils_1.gqlQuery)("delegations", (_a = args.delegations) !== null && _a !== void 0 ? _a : {}, (0, utils_1.convertObjectToPropertiesString)(fields.delegations), true));
    }
    if (fields === null || fields === void 0 ? void 0 : fields.history) {
        GQLStakingQuery.push((0, utils_1.gqlQuery)("history", (_b = args.history) !== null && _b !== void 0 ? _b : {}, (0, utils_1.convertObjectToPropertiesString)(fields.history), true));
    }
    if (fields === null || fields === void 0 ? void 0 : fields.redelegations) {
        GQLStakingQuery.push((0, utils_1.gqlQuery)("redelegations", (_c = args.redelegations) !== null && _c !== void 0 ? _c : {}, (0, utils_1.convertObjectToPropertiesString)(fields.redelegations), true));
    }
    if (fields === null || fields === void 0 ? void 0 : fields.unbondings) {
        GQLStakingQuery.push((0, utils_1.gqlQuery)("unbondings", (_d = args.unbondings) !== null && _d !== void 0 ? _d : {}, (0, utils_1.convertObjectToPropertiesString)(fields.unbondings), true));
    }
    if (fields === null || fields === void 0 ? void 0 : fields.validators) {
        GQLStakingQuery.push((0, utils_1.gqlQuery)("validators", (_e = args.validators) !== null && _e !== void 0 ? _e : {}, (0, utils_1.convertObjectToPropertiesString)(fields.validators), true));
    }
    return `
      staking {
        ${GQLStakingQuery.join("\n")}
      }
    `;
};
exports.GQLStakingQueryString = GQLStakingQueryString;
const staking = (args, endpt, fields) => __awaiter(void 0, void 0, void 0, function* () {
    return (0, utils_1.doGqlQuery)(`{
      ${(0, exports.GQLStakingQueryString)(args, fields)}
    }`, endpt);
});
exports.staking = staking;
//# sourceMappingURL=staking.js.map