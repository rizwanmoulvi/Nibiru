"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HeartMonitor = void 0;
const ws_1 = require("ws");
const graphql_ws_1 = require("graphql-ws");
const __1 = require("..");
/** HeartMonitor is an API for "Heart Monitor" that indexes the Nibiru blockchain
 * and stores the data in strucutred tables. Each of the `HeartMonitor`'s methods
 * corresponds to a GQLQueryGql function. */
class HeartMonitor {
    constructor(gqlEndpt, webSocketUrl, webSocketImpl) {
        this.defaultGqlEndpt = "https://hm-graphql.devnet-2.nibiru.fi/query";
        this.closeWebSocket = () => __awaiter(this, void 0, void 0, function* () { var _a; return (_a = this.subscriptionClient) === null || _a === void 0 ? void 0 : _a.dispose(); });
        this.communityPool = (args, fields) => __awaiter(this, void 0, void 0, function* () { return (0, __1.communityPool)(args, this.gqlEndpt, fields); });
        this.distributionCommissions = (args, fields) => __awaiter(this, void 0, void 0, function* () { return (0, __1.distributionCommissions)(args, this.gqlEndpt, fields); });
        this.featureFlags = (fields) => __awaiter(this, void 0, void 0, function* () { return (0, __1.featureFlags)(this.gqlEndpt, fields); });
        this.governance = (args, fields) => __awaiter(this, void 0, void 0, function* () { return (0, __1.governance)(args, this.gqlEndpt, fields); });
        this.ibc = (args, fields) => __awaiter(this, void 0, void 0, function* () { return (0, __1.ibc)(args, this.gqlEndpt, fields); });
        this.inflation = (args, fields) => __awaiter(this, void 0, void 0, function* () { return (0, __1.inflation)(args, this.gqlEndpt, fields); });
        this.markPriceCandles = (args, fields) => __awaiter(this, void 0, void 0, function* () { return (0, __1.markPriceCandles)(args, this.gqlEndpt, fields); });
        this.markPriceCandlesSubscription = (args, fields) => __awaiter(this, void 0, void 0, function* () { return (0, __1.markPriceCandlesSubscription)(args, fields, this.subscriptionClient); });
        this.oracle = (args, fields) => __awaiter(this, void 0, void 0, function* () { return (0, __1.oracle)(args, this.gqlEndpt, fields); });
        this.oraclePricesSubscription = (args, fields) => __awaiter(this, void 0, void 0, function* () { return (0, __1.oraclePricesSubscription)(args, fields, this.subscriptionClient); });
        this.perp = (args, fields) => __awaiter(this, void 0, void 0, function* () { return (0, __1.perp)(args, this.gqlEndpt, fields); });
        this.perpMarketSubscription = (args, fields) => __awaiter(this, void 0, void 0, function* () { return (0, __1.perpMarketSubscription)(args, fields, this.subscriptionClient); });
        this.perpPositionsSubscription = (args, fields) => __awaiter(this, void 0, void 0, function* () { return (0, __1.perpPositionsSubscription)(args, fields, this.subscriptionClient); });
        this.proxies = (fields) => __awaiter(this, void 0, void 0, function* () { return (0, __1.proxies)(this.gqlEndpt, fields); });
        this.GQLQueryGqlBatchHandler = (queryQueryStrings) => __awaiter(this, void 0, void 0, function* () { return (0, __1.queryBatchHandler)(queryQueryStrings, this.gqlEndpt); });
        this.spotLpPositions = (args, fields) => __awaiter(this, void 0, void 0, function* () { return (0, __1.spotLpPositions)(args, this.gqlEndpt, fields); });
        this.spotPoolCreated = (args, fields) => __awaiter(this, void 0, void 0, function* () { return (0, __1.spotPoolCreated)(args, this.gqlEndpt, fields); });
        this.spotPoolExited = (args, fields) => __awaiter(this, void 0, void 0, function* () { return (0, __1.spotPoolExited)(args, this.gqlEndpt, fields); });
        this.spotPoolJoined = (args, fields) => __awaiter(this, void 0, void 0, function* () { return (0, __1.spotPoolJoined)(args, this.gqlEndpt, fields); });
        this.spotPools = (args, fields) => __awaiter(this, void 0, void 0, function* () { return (0, __1.spotPools)(args, this.gqlEndpt, fields); });
        this.spotPoolSwap = (args, fields) => __awaiter(this, void 0, void 0, function* () { return (0, __1.spotPoolSwap)(args, this.gqlEndpt, fields); });
        this.staking = (args, fields) => __awaiter(this, void 0, void 0, function* () { return (0, __1.staking)(args, this.gqlEndpt, fields); });
        this.stats = (args, fields) => __awaiter(this, void 0, void 0, function* () { return (0, __1.stats)(args, this.gqlEndpt, fields); });
        this.user = (args, fields) => __awaiter(this, void 0, void 0, function* () { return (0, __1.user)(args, this.gqlEndpt, fields); });
        this.users = (args, fields) => __awaiter(this, void 0, void 0, function* () { return (0, __1.users)(args, this.gqlEndpt, fields); });
        this.wasm = (args, fields) => __awaiter(this, void 0, void 0, function* () { return (0, __1.wasm)(args, this.gqlEndpt, fields); });
        if (typeof gqlEndpt === "string") {
            this.gqlEndpt = gqlEndpt;
        }
        else {
            this.gqlEndpt = this.defaultGqlEndpt;
        }
        if (webSocketUrl) {
            this.subscriptionClient = (0, graphql_ws_1.createClient)({
                url: webSocketUrl,
                webSocketImpl: webSocketImpl !== null && webSocketImpl !== void 0 ? webSocketImpl : ws_1.WebSocket,
            });
        }
    }
}
exports.HeartMonitor = HeartMonitor;
//# sourceMappingURL=heart-monitor.js.map