import { WebSocket } from "ws";
import { Client, ExecutionResult } from "graphql-ws";
import { GQLDistributionCommission, GQLMarkPriceCandle, GQLOraclePrice, GQLPerpMarket, GQLPerpPosition, GQLQueryGqlCommunityPoolArgs, GQLQueryGqlDistributionCommissionsArgs, GQLQueryGqlMarkPriceCandlesArgs, GQLQueryGqlSpotLpPositionsArgs, GQLQueryGqlSpotPoolCreatedArgs, GQLQueryGqlSpotPoolExitedArgs, GQLQueryGqlSpotPoolJoinedArgs, GQLQueryGqlSpotPoolSwapArgs, GQLQueryGqlSpotPoolsArgs, GQLQueryGqlUsersArgs, GQLSpotLpPosition, GQLSpotPool, GQLSpotPoolCreated, GQLSpotPoolExited, GQLSpotPoolJoined, GQLSpotPoolSwap, GQLSubscriptionGqlMarkPriceCandlesArgs, GQLSubscriptionGqlOraclePricesArgs, GQLSubscriptionGqlPerpMarketArgs, GQLSubscriptionGqlPerpPositionsArgs, GQLToken, GQLUser, GqlOutCommunityPool, GqlOutDistributionCommissions, GqlOutSpotLpPositions, GqlOutSpotPoolCreated, GqlOutSpotPoolExited, GqlOutSpotPoolJoined, GqlOutSpotPoolSwap, GqlOutSpotPools, GqlOutUsers, GqlOutPerp, GQLPerpFields, GqlOutStats, QueryStatsArgs, GQLStatsFields, GqlOutGovernance, QueryGovernanceArgs, GqlOutMarkPriceCandles, QueryOracleArgs, OracleFields, GqlOutOracle, GovernanceFields, QueryIbcArgs, IbcFields, GqlOutIbc, QueryPerpArgs, GqlOutPerpMarket, GqlOutOraclePrices, GqlOutPerpPositions, GqlOutWasm, GqlWasmFields, QueryWasmArgs, QueryInflationArgs, InflationFields, GqlOutInflation, GQLFeatureFlags, GqlOutFeatureFlags, DeepPartial, GQLProxies, GqlOutProxies, GQLStakingFields, GqlOutStaking, QueryStakingArgs, GQLQueryGqlUserArgs, GqlOutUser } from "..";
/** IHeartMonitor is an interface for a Heart Monitor GraphQL API.
 * Each of its methods corresponds to a GQLQueryGql function. */
export interface IHeartMonitor {
    closeWebSocket: () => Promise<void | undefined>;
    readonly communityPool: (args: GQLQueryGqlCommunityPoolArgs, fields: DeepPartial<GQLToken>) => Promise<GqlOutCommunityPool>;
    readonly distributionCommissions: (args: GQLQueryGqlDistributionCommissionsArgs, fields: DeepPartial<GQLDistributionCommission>) => Promise<GqlOutDistributionCommissions>;
    readonly featureFlags: (fields: DeepPartial<GQLFeatureFlags>) => Promise<GqlOutFeatureFlags>;
    readonly governance: (args: QueryGovernanceArgs, fields: DeepPartial<GovernanceFields>) => Promise<GqlOutGovernance>;
    readonly ibc: (args: QueryIbcArgs, fields: DeepPartial<IbcFields>) => Promise<GqlOutIbc>;
    readonly inflation: (args: QueryInflationArgs, fields: DeepPartial<InflationFields>) => Promise<GqlOutInflation>;
    readonly markPriceCandles: (args: GQLQueryGqlMarkPriceCandlesArgs, fields: DeepPartial<GQLMarkPriceCandle>) => Promise<GqlOutMarkPriceCandles>;
    readonly markPriceCandlesSubscription: (args: GQLSubscriptionGqlMarkPriceCandlesArgs, fields: DeepPartial<GQLMarkPriceCandle>) => Promise<AsyncIterableIterator<ExecutionResult<GqlOutMarkPriceCandles>> | undefined>;
    readonly oracle: (args: QueryOracleArgs, fields: DeepPartial<OracleFields>) => Promise<GqlOutOracle>;
    readonly oraclePricesSubscription: (args: GQLSubscriptionGqlOraclePricesArgs, fields: DeepPartial<GQLOraclePrice>) => Promise<AsyncIterableIterator<ExecutionResult<GqlOutOraclePrices>> | undefined>;
    readonly perp: (args: QueryPerpArgs, fields: DeepPartial<GQLPerpFields>) => Promise<GqlOutPerp>;
    readonly perpMarketSubscription: (args: GQLSubscriptionGqlPerpMarketArgs, fields: DeepPartial<GQLPerpMarket>) => Promise<AsyncIterableIterator<ExecutionResult<GqlOutPerpMarket>> | undefined>;
    readonly perpPositionsSubscription: (args: GQLSubscriptionGqlPerpPositionsArgs, fields: DeepPartial<GQLPerpPosition>) => Promise<AsyncIterableIterator<ExecutionResult<GqlOutPerpPositions>> | undefined>;
    readonly proxies: (fields: DeepPartial<GQLProxies>) => Promise<GqlOutProxies>;
    readonly GQLQueryGqlBatchHandler: <T>(queryQueryStrings: string[]) => Promise<T>;
    readonly spotLpPositions: (args: GQLQueryGqlSpotLpPositionsArgs, fields: DeepPartial<GQLSpotLpPosition>) => Promise<GqlOutSpotLpPositions>;
    readonly spotPoolCreated: (args: GQLQueryGqlSpotPoolCreatedArgs, fields: DeepPartial<GQLSpotPoolCreated>) => Promise<GqlOutSpotPoolCreated>;
    readonly spotPoolExited: (args: GQLQueryGqlSpotPoolExitedArgs, fields: DeepPartial<GQLSpotPoolExited>) => Promise<GqlOutSpotPoolExited>;
    readonly spotPoolJoined: (args: GQLQueryGqlSpotPoolJoinedArgs, fields: DeepPartial<GQLSpotPoolJoined>) => Promise<GqlOutSpotPoolJoined>;
    readonly spotPools: (args: GQLQueryGqlSpotPoolsArgs, fields: DeepPartial<GQLSpotPool>) => Promise<GqlOutSpotPools>;
    readonly spotPoolSwap: (args: GQLQueryGqlSpotPoolSwapArgs, fields: DeepPartial<GQLSpotPoolSwap>) => Promise<GqlOutSpotPoolSwap>;
    readonly staking: (args: QueryStakingArgs, fields?: DeepPartial<GQLStakingFields>) => Promise<GqlOutStaking>;
    readonly stats: (args: QueryStatsArgs, fields: DeepPartial<GQLStatsFields>) => Promise<GqlOutStats>;
    readonly user: (args: GQLQueryGqlUserArgs, fields: DeepPartial<GQLUser>) => Promise<GqlOutUser>;
    readonly users: (args: GQLQueryGqlUsersArgs, fields: DeepPartial<GQLUser>) => Promise<GqlOutUsers>;
    readonly wasm: (args: QueryWasmArgs, fields: DeepPartial<GqlWasmFields>) => Promise<GqlOutWasm>;
}
/** HeartMonitor is an API for "Heart Monitor" that indexes the Nibiru blockchain
 * and stores the data in strucutred tables. Each of the `HeartMonitor`'s methods
 * corresponds to a GQLQueryGql function. */
export declare class HeartMonitor implements IHeartMonitor {
    gqlEndpt: string;
    defaultGqlEndpt: string;
    subscriptionClient: Client | undefined;
    constructor(gqlEndpt?: string, webSocketUrl?: string, webSocketImpl?: typeof WebSocket);
    closeWebSocket: () => Promise<void | undefined>;
    communityPool: (args: GQLQueryGqlCommunityPoolArgs, fields: DeepPartial<GQLToken>) => Promise<GqlOutCommunityPool>;
    distributionCommissions: (args: GQLQueryGqlDistributionCommissionsArgs, fields: DeepPartial<GQLDistributionCommission>) => Promise<GqlOutDistributionCommissions>;
    featureFlags: (fields: DeepPartial<GQLFeatureFlags>) => Promise<GqlOutFeatureFlags>;
    governance: (args: QueryGovernanceArgs, fields: DeepPartial<GovernanceFields>) => Promise<GqlOutGovernance>;
    ibc: (args: QueryIbcArgs, fields: DeepPartial<IbcFields>) => Promise<GqlOutIbc>;
    inflation: (args: QueryInflationArgs, fields: DeepPartial<InflationFields>) => Promise<GqlOutInflation>;
    markPriceCandles: (args: GQLQueryGqlMarkPriceCandlesArgs, fields: DeepPartial<GQLMarkPriceCandle>) => Promise<GqlOutMarkPriceCandles>;
    markPriceCandlesSubscription: (args: GQLSubscriptionGqlMarkPriceCandlesArgs, fields: DeepPartial<GQLMarkPriceCandle>) => Promise<AsyncIterableIterator<ExecutionResult<GqlOutMarkPriceCandles, Record<string, unknown>>> | undefined>;
    oracle: (args: QueryOracleArgs, fields: DeepPartial<OracleFields>) => Promise<GqlOutOracle>;
    oraclePricesSubscription: (args: GQLSubscriptionGqlOraclePricesArgs, fields: DeepPartial<GQLOraclePrice>) => Promise<AsyncIterableIterator<ExecutionResult<GqlOutOraclePrices, Record<string, unknown>>> | undefined>;
    perp: (args: QueryPerpArgs, fields: DeepPartial<GQLPerpFields>) => Promise<GqlOutPerp>;
    perpMarketSubscription: (args: GQLSubscriptionGqlPerpMarketArgs, fields: DeepPartial<GQLPerpMarket>) => Promise<AsyncIterableIterator<ExecutionResult<GqlOutPerpMarket, Record<string, unknown>>> | undefined>;
    perpPositionsSubscription: (args: GQLSubscriptionGqlPerpPositionsArgs, fields: DeepPartial<GQLPerpPosition>) => Promise<AsyncIterableIterator<ExecutionResult<GqlOutPerpPositions, Record<string, unknown>>> | undefined>;
    proxies: (fields: DeepPartial<GQLProxies>) => Promise<GqlOutProxies>;
    GQLQueryGqlBatchHandler: <T>(queryQueryStrings: string[]) => Promise<T>;
    spotLpPositions: (args: GQLQueryGqlSpotLpPositionsArgs, fields: DeepPartial<GQLSpotLpPosition>) => Promise<GqlOutSpotLpPositions>;
    spotPoolCreated: (args: GQLQueryGqlSpotPoolCreatedArgs, fields: DeepPartial<GQLSpotPoolCreated>) => Promise<GqlOutSpotPoolCreated>;
    spotPoolExited: (args: GQLQueryGqlSpotPoolExitedArgs, fields: DeepPartial<GQLSpotPoolExited>) => Promise<GqlOutSpotPoolExited>;
    spotPoolJoined: (args: GQLQueryGqlSpotPoolJoinedArgs, fields: DeepPartial<GQLSpotPoolJoined>) => Promise<GqlOutSpotPoolJoined>;
    spotPools: (args: GQLQueryGqlSpotPoolsArgs, fields: DeepPartial<GQLSpotPool>) => Promise<GqlOutSpotPools>;
    spotPoolSwap: (args: GQLQueryGqlSpotPoolSwapArgs, fields: DeepPartial<GQLSpotPoolSwap>) => Promise<GqlOutSpotPoolSwap>;
    staking: (args: QueryStakingArgs, fields?: DeepPartial<GQLStakingFields>) => Promise<GqlOutStaking>;
    stats: (args: QueryStatsArgs, fields: DeepPartial<GQLStatsFields>) => Promise<GqlOutStats>;
    user: (args: GQLQueryGqlUserArgs, fields: DeepPartial<GQLUser>) => Promise<GqlOutUser>;
    users: (args: GQLQueryGqlUsersArgs, fields: DeepPartial<GQLUser>) => Promise<GqlOutUsers>;
    wasm: (args: QueryWasmArgs, fields: DeepPartial<GqlWasmFields>) => Promise<GqlOutWasm>;
}
//# sourceMappingURL=heart-monitor.d.ts.map